{"version":3,"sources":["../src/FormControl.jsx"],"names":["ORIGINAL_VALUES","Symbol","GET_RESULT_FROM_SCHEMA","ASSEMBLE_FIELD_FROM_RESULT","ASSEMBLE_FIELD_CHANGE","ASYNC_ASSEMBLE_FIELD_CHANGE","ASSEMBLE_FIELD_VALIDATE","ASYNC_ASSEMBLE_FIELD_VALIDATE","schemas","methods","props","classNames","values","state","fields","init","validator","Object","assign","formControl","nextProps","keys","name","theValue","value","String","className","static","setState","forEach","every","result","Component","propTypes","object","childContextTypes","isRequired","defaultProps","classes","initClassNames","undefined","createDelayValidateFunc","ms","debounceValidateAndUpdate","forceUpdate","delayFunc","schema","validateField","error","classNameArray","success","filter","item","join","message","resultField","validateFieldsByNames","names","isValid","onFormChange","e","target","type","slice","index","indexOf","push","splice","formDidChange","changeValues","addSchemas","removeSchemas","length","validateByNames","addValues","removeValues","resetValues","validate"],"mappings":"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","file":"FormControl.js","sourcesContent":["/**\n * A lightweight and extensible React validation component\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Validator from 'validate-framework-utils';\nimport debounce from 'lodash.debounce';\nimport isNumber from 'lodash.isnumber';\n\nconst ORIGINAL_VALUES = Symbol('#ORIGINAL_VALUES');\n\nconst GET_RESULT_FROM_SCHEMA = Symbol('#GET_RESULT_FROM_SCHEMA');\nconst ASSEMBLE_FIELD_FROM_RESULT = Symbol('#ASSEMBLE_FIELD_FROM_RESULT');\n\nconst ASSEMBLE_FIELD_CHANGE = Symbol('#ASSEMBLE_FIELD_CHANGE');\nconst ASYNC_ASSEMBLE_FIELD_CHANGE = Symbol('#ASYNC_ASSEMBLE_FIELD_CHANGE');\n\nconst ASSEMBLE_FIELD_VALIDATE = Symbol('#ASSEMBLE_FIELD_VALIDATE');\nconst ASYNC_ASSEMBLE_FIELD_VALIDATE = Symbol('#ASYNC_ASSEMBLE_FIELD_VALIDATE');\n\n/**\n * React validation component\n * @param schemas\n * @param methods Extended Validation Method\n */\nexport default (schemas, methods) => FormComponent => (\n\n  /**\n   * Returns a react form\n   */\n  class FormControl extends React.Component {\n\n    static propTypes = {\n      values: PropTypes.object,\n      classNames: PropTypes.object,\n    };\n\n    static childContextTypes = {\n      formControl: PropTypes.object.isRequired,\n    };\n\n    static defaultProps = {\n      classNames: {},\n    };\n\n    schemas = { ...schemas };\n\n    [ORIGINAL_VALUES] = {};\n\n    constructor(props) {\n      super(props);\n      const {\n        classNames,\n        values,\n      } = props;\n\n      this.state = {\n        fields: {},\n      };\n\n      // Init\n      if (values) {\n        this.init(values, classNames);\n      }\n\n      // Initializes the validation component and customizes the validation method\n      this.validator = new Validator();\n      Object.assign(this.validator, methods, { fields: this.state.fields });\n    }\n\n    getChildContext() {\n      return {\n        formControl: this,\n      };\n    }\n\n    componentWillReceiveProps(nextProps) {\n      const { values } = nextProps;\n      // No value\n      if (!values) {\n        return;\n      }\n      // Updates the state from the parent component\n      const { classNames } = this.props;\n      const { fields } = this.state;\n\n      (async () => {\n        // eslint-disable-next-line no-restricted-syntax\n        for (const name of Object.keys(values)) {\n          const theValue = values[name];\n          // Convert to string\n          const value = isNumber(theValue) ? String(theValue) : theValue;\n          // Validate the new data\n          if (fields[name]) {\n            // diff\n            if (fields[name].value !== value) {\n              await this[ASYNC_ASSEMBLE_FIELD_CHANGE](name, value);\n            }\n          } else {\n            // Add a new field\n            fields[name] = {\n              className: classNames.static,\n              value,\n            };\n          }\n        }\n        // Update\n        this.setState({\n          fields,\n        });\n      })();\n    }\n\n    /**\n     * Get the fields object\n     * @returns {Object}\n     */\n    get fields() {\n      return this.state.fields;\n    }\n\n    /**\n     * Gets a list of form values\n     * @return {Object}\n     */\n    get formValues() {\n      const { fields } = this.state;\n      const values = {};\n      Object.keys(fields).forEach((name) => {\n        values[name] = fields[name].value;\n      });\n      return values;\n    }\n\n    /**\n     * Gets the global validation status\n     * @return {Boolean}\n     */\n    get isAllValid() {\n      const { fields } = this.state;\n      return Object\n        .keys(this.schemas)\n        .every(name => fields[name] && fields[name].result);\n    }\n\n    /**\n     * Initializes the form value and classes\n     * @param values\n     * @param classes\n     */\n    init = (values, classes) => {\n      const { fields } = this.state;\n      // Assign classNames\n      if (classes) {\n        this.initClassNames(classes);\n      }\n      // Initialize\n      Object.keys(values).forEach((name) => {\n        const theValue = values[name];\n        // Convert to string\n        const value = isNumber(theValue) ? String(theValue) : theValue;\n        fields[name] = {\n          ...fields[name],\n          className: this.props.classNames.static,\n          value,\n        };\n        // Only initialized once\n        if (this[ORIGINAL_VALUES][name] === undefined) {\n          this[ORIGINAL_VALUES][name] = value;\n        }\n        // Synchronize values external state\n        if (this.props.values) {\n          this.props.values[name] = value;\n        }\n      });\n      return this;\n    };\n\n    /**\n     * Init classNames\n     * @param classes\n     */\n    initClassNames = (classes) => {\n      // Merge\n      Object.assign(this.props.classNames, classes);\n      return this;\n    };\n\n    /**\n     * Create asynchronous validation\n     * See createField.jsx\n     * @param ms\n     * @return {Function}\n     */\n    createDelayValidateFunc = (ms) => {\n      const debounceValidateAndUpdate = async (...args) => {\n        await this[ASYNC_ASSEMBLE_FIELD_VALIDATE](...args);\n        this.forceUpdate();\n      };\n      return debounce(debounceValidateAndUpdate, ms);\n    };\n\n    [ASSEMBLE_FIELD_CHANGE] = (name, value) => {\n      const { fields } = this.state;\n      fields[name].value = value;\n      // Async\n      if (fields[name].delayFunc) {\n        fields[name].delayFunc(name, value);\n      } else {\n        this[ASSEMBLE_FIELD_VALIDATE](name, value);\n      }\n    };\n\n    [ASYNC_ASSEMBLE_FIELD_CHANGE] = async (name, value) => {\n      this.state.fields[name].value = value;\n      await this[ASYNC_ASSEMBLE_FIELD_VALIDATE](name, value);\n    };\n\n    [GET_RESULT_FROM_SCHEMA] = (name, value) => {\n      const schema = this.schemas[name];\n      return schema ? this.validator.validateField({ ...schema, name })(value) : {};\n    };\n\n    [ASSEMBLE_FIELD_FROM_RESULT] = (name, { result, error }) => {\n      const { classNames } = this.props;\n      const { fields } = this.state;\n\n      const classNameArray = [\n        classNames.static,\n        result ? classNames.success : null,\n        result === false ? classNames.error : null,\n      ];\n      // Assemble\n      Object.assign(fields[name], {\n        className: classNameArray.filter(item => item).join('\\u{20}'),\n        result,\n        message: error ? error.message : undefined,\n      });\n    };\n\n    [ASSEMBLE_FIELD_VALIDATE] = (name, value) => {\n      const resultField = this[GET_RESULT_FROM_SCHEMA](name, value);\n      this[ASSEMBLE_FIELD_FROM_RESULT](name, resultField);\n    };\n\n    [ASYNC_ASSEMBLE_FIELD_VALIDATE] = async (name, value) => {\n      const resultField = await this[GET_RESULT_FROM_SCHEMA](name, value);\n      this[ASSEMBLE_FIELD_FROM_RESULT](name, resultField);\n    };\n\n    /**\n     * Validate fields by names\n     * @param names\n     * @return {Boolean}\n     */\n    validateFieldsByNames = async (...names) => {\n      const { fields } = this.state;\n      let isValid = true;\n      // eslint-disable-next-line no-restricted-syntax\n      for (const name of names) {\n        if (fields[name]) {\n          await this[ASYNC_ASSEMBLE_FIELD_VALIDATE](name, fields[name].value);\n\n          // Exclude unauthenticated and validated successfully\n          if (fields[name].result === false) {\n            isValid = false;\n          }\n        }\n      }\n      return isValid;\n    };\n\n    // Form change event listener\n    onFormChange = (e) => {\n      const { name, type, value } = e.target;\n      const { fields } = this.state;\n\n      // Dependent on the name attribute\n      if (!name) {\n        return;\n      }\n\n      let theValue;\n      // Checkbox processing\n      if (type === 'checkbox') {\n        theValue = fields[name].value.slice();\n        const index = theValue.indexOf(value);\n        if (index === -1) {\n          theValue.push(value);\n        } else {\n          theValue.splice(index, 1);\n        }\n      } else {\n        theValue = value;\n      }\n      // Synchronize values external state\n      if (this.props.values) {\n        this.props.values[name] = theValue;\n      }\n      // Assemble and delay validate\n      this[ASSEMBLE_FIELD_CHANGE](name, theValue);\n      // Update\n      this.setState({\n        fields,\n      });\n      this.formDidChange({ [name]: theValue });\n    };\n\n    /**\n     * Customize to change the values\n     * @param values\n     */\n    changeValues = (values) => {\n      const { fields } = this.state;\n      // Initializes\n      this.init(values);\n      Object.keys(values).forEach((name) => {\n        this[ASSEMBLE_FIELD_CHANGE](name, values[name]);\n      });\n      // Update\n      this.setState({\n        fields,\n      });\n      this.formDidChange(values);\n      return this;\n    };\n\n    /**\n     * Add one or more validation rules\n     * @param schema\n     */\n    addSchemas = (schema) => {\n      Object.assign(this.schemas, schema);\n      return this;\n    };\n\n    /**\n     * Delete one or more validation rules\n     * If there is no name, it will all be removed.\n     * @param names\n     */\n    removeSchemas = (...names) => {\n      if (names.length) {\n        names.forEach((name) => {\n          delete this.schemas[name];\n        });\n      } else {\n        this.schemas = {};\n      }\n      // Validate the deleted status\n      this.validateByNames(...names);\n      return this;\n    };\n\n    /**\n     * Add one or more fields\n     * @param values\n     */\n    addValues = (values) => {\n      const { fields } = this.state;\n      // Initializes\n      this.init(values);\n      // Update\n      this.setState({\n        fields,\n      });\n      this.formDidChange(values);\n      return this;\n    };\n\n    /**\n     * Deletes one or more fields\n     * If there is no name, it will all be removed.\n     * @param names\n     */\n    removeValues = (...names) => {\n      const { fields } = this.state;\n      if (names.length) {\n        names.forEach((name) => {\n          delete fields[name];\n          if (this.props.values) {\n            delete this.props.values[name];\n          }\n        });\n      } else {\n        // Remove all\n        Object.keys(fields).forEach((name) => {\n          delete this.state.fields[name];\n          if (this.props.values) {\n            delete this.props.values[name];\n          }\n        });\n      }\n      // Update\n      this.setState({\n        fields,\n      });\n      this.formDidChange({});\n      return this;\n    };\n\n    /**\n     * Reset one or more fields\n     * If there is no name, it will all be init.\n     * @param names\n     */\n    resetValues = (...names) => {\n      const { fields } = this.state;\n      const values = {};\n      if (names.length) {\n        names.forEach((name) => {\n          values[name] = this[ORIGINAL_VALUES][name];\n        });\n        this.init(values);\n      } else {\n        // Init all\n        Object.assign(values, this[ORIGINAL_VALUES]);\n        this.init(values);\n      }\n      // Update\n      this.setState({\n        fields,\n      });\n      this.formDidChange(values);\n      return this;\n    };\n\n    /**\n     * Validate the component through names\n     * @param names\n     * @return {Boolean}\n     */\n    validateByNames = async (...names) => {\n      const result = await this.validateFieldsByNames(...names);\n      const { fields } = this.state;\n      // Update\n      this.setState({\n        fields,\n      });\n      return result;\n    };\n\n    /**\n     * Validate all\n     * @return {Boolean}\n     */\n    validate = () => this.validateByNames(...Object.keys(this.schemas));\n\n    // After change\n    formDidChange = () => {};\n\n    render() {\n      return (\n        <FormComponent\n          {...this.props}\n          formControl={this}\n        />\n      );\n    }\n  }\n);\n"]}