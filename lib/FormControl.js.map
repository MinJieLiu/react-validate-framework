{"version":3,"sources":["../src/FormControl.jsx"],"names":["schemas","methods","props","classNames","values","delay","delayValidateField","bind","state","fields","init","validator","Object","assign","formControl","nextProps","keys","name","theValue","value","String","assembleFieldChange","assembleFieldValidate","className","static","setState","forEach","every","result","Component","propTypes","object","number","childContextTypes","isRequired","defaultProps","originalValues","classes","initClassNames","undefined","schema","validateByField","error","classNameArray","success","filter","item","join","message","validateField","validateFieldsByNames","names","isValid","onFormChange","e","target","type","slice","index","indexOf","push","splice","formDidChange","changeValues","addSchemas","removeSchemas","length","validateByNames","addValues","removeValues","resetValues","validate"],"mappings":"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","file":"FormControl.js","sourcesContent":["/**\n * A lightweight and extensible React validation component\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Validator from 'validate-framework-utils';\nimport debounce from 'lodash/debounce';\nimport isNumber from 'lodash/isNumber';\nimport noop from 'lodash/noop';\n\n/**\n * React validation component\n * @param schemas\n * @param methods Extended Validation Method\n * @return Component\n */\nexport default (schemas, methods) => FormComponent => (\n\n  /**\n   * Returns a react form\n   */\n  class FormControl extends React.Component {\n\n    static propTypes = {\n      values: PropTypes.object,\n      classNames: PropTypes.object,\n      delay: PropTypes.number,\n    };\n\n    static childContextTypes = {\n      formControl: PropTypes.object.isRequired,\n    };\n\n    static defaultProps = {\n      classNames: {},\n      delay: 0,\n    };\n\n    schemas = Object.assign({}, schemas);\n\n    // Original\n    originalValues = {};\n\n    constructor(props) {\n      super(props);\n      const {\n        classNames,\n        values,\n        delay,\n      } = props;\n\n      if (delay) {\n        this.delayValidateField = debounce(this.delayValidateField.bind(this), delay);\n      }\n\n      this.state = {\n        fields: {},\n      };\n\n      // Init\n      if (values) {\n        this.init(values, classNames);\n      }\n\n      // Initializes the validation component and customizes the validation method\n      this.validator = new Validator();\n      Object.assign(this.validator, methods, { fields: this.state.fields });\n    }\n\n    getChildContext() {\n      return {\n        formControl: this,\n      };\n    }\n\n    componentWillReceiveProps(nextProps) {\n      const { values } = nextProps;\n      // No value\n      if (!values) {\n        return;\n      }\n      // Updates the state from the parent component\n      const { classNames } = this.props;\n      const { fields } = this.state;\n\n      (async () => {\n        // eslint-disable-next-line no-restricted-syntax\n        for (const name of Object.keys(values)) {\n          const theValue = values[name];\n          // Convert to string\n          const value = isNumber(theValue) ? String(theValue) : theValue;\n          // Validate the new data\n          if (fields[name]) {\n            // diff\n            if (fields[name].value !== value) {\n              this.assembleFieldChange(name, value);\n              await this.assembleFieldValidate(name, value);\n            }\n          } else {\n            // Add a new field\n            fields[name] = {\n              className: classNames.static,\n              value,\n            };\n          }\n        }\n        // Update\n        this.setState({\n          fields,\n        });\n      })();\n    }\n\n    /**\n     * Get the fields object\n     * @returns {Object}\n     */\n    get fields() {\n      return this.state.fields;\n    }\n\n    /**\n     * Gets a list of form values\n     * @return {Object}\n     */\n    get formValues() {\n      const { fields } = this.state;\n      const values = {};\n      Object.keys(fields).forEach((name) => {\n        values[name] = fields[name].value;\n      });\n      return values;\n    }\n\n    /**\n     * Gets the global validation status\n     * @return {Boolean}\n     */\n    get isAllValid() {\n      const { fields } = this.state;\n      return Object\n        .keys(this.schemas)\n        .every(name => fields[name] && fields[name].result);\n    }\n\n    /**\n     * Initializes the form value and classes\n     * @param values\n     * @param classes\n     */\n    init = (values, classes) => {\n      const { fields } = this.state;\n      // Assign classNames\n      if (classes) {\n        this.initClassNames(classes);\n      }\n      // Initialize\n      Object.keys(values).forEach((name) => {\n        const theValue = values[name];\n        // Convert to string\n        const value = isNumber(theValue) ? String(theValue) : theValue;\n        fields[name] = {\n          className: this.props.classNames.static,\n          value,\n        };\n        // Only initialized once\n        if (this.originalValues[name] === undefined) {\n          this.originalValues[name] = value;\n        }\n        // Synchronize values external state\n        if (this.props.values) {\n          this.props.values[name] = value;\n        }\n      });\n      return this;\n    };\n\n    /**\n     * Init classNames\n     * @param classes\n     */\n    initClassNames = (classes) => {\n      // Merge\n      Object.assign(this.props.classNames, classes);\n      return this;\n    };\n\n    /**\n     * Assemble the data\n     * This method is not operational\n     * @param name\n     * @param value\n     * @return {FormControl}\n     */\n    assembleFieldChange = (name, value) => {\n      Object.assign(this.state.fields[name], {\n        value,\n      });\n      return this;\n    };\n\n    /**\n     * Validate the data\n     * This method is not operational\n     * @param name\n     * @param value\n     * @return {FormControl}\n     */\n    assembleFieldValidate = async (name, value) => {\n      const { classNames } = this.props;\n      const { fields } = this.state;\n      // No schema is not to validate\n      const schema = this.schemas[name] && Object.assign(this.schemas[name], { value });\n      const { result, error } = schema\n        ? await this.validator.validateByField(schema)\n        : {};\n      // Assembly class name\n      // Validation success and validation failure Add the appropriate class\n      const classNameArray = [\n        classNames.static,\n        result ? classNames.success : null,\n        result === false ? classNames.error : null,\n      ];\n      // Assemble\n      Object.assign(fields[name], {\n        className: classNameArray.filter(item => item).join('\\u{20}'),\n        result,\n        message: error ? error.message : undefined,\n      });\n      return this;\n    };\n\n    /**\n     * Validate a single field\n     * @param name\n     * @param value\n     * @return {Boolean}\n     */\n    validateField = async (name, value) => {\n      const { fields } = this.state;\n      // Assemble\n      await this.assembleFieldValidate(name, value);\n      return fields[name].result;\n    };\n\n    /**\n     * DelayValidateField\n     * @param name\n     * @param value\n     */\n    async delayValidateField(name, value) {\n      const { fields } = this.state;\n      // Assemble\n      await this.assembleFieldValidate(name, value);\n      this.setState({\n        fields,\n      });\n      return this;\n    }\n\n    /**\n     * Validate fields by names\n     * @param names\n     * @return {Boolean}\n     */\n    validateFieldsByNames = async (...names) => {\n      const { fields } = this.state;\n      let isValid = true;\n      // eslint-disable-next-line no-restricted-syntax\n      for (const name of names) {\n        const result = fields[name] && await this.validateField(name, fields[name].value);\n        // Exclude unauthenticated and validated successfully\n        if (result === false) {\n          isValid = false;\n        }\n      }\n      return isValid;\n    };\n\n    // Form change event listener\n    onFormChange = (e) => {\n      const { name, type, value } = e.target;\n      const { fields } = this.state;\n\n      // Dependent on the name attribute\n      if (!name) {\n        return;\n      }\n\n      let theValue;\n      // Checkbox processing\n      if (type === 'checkbox') {\n        theValue = fields[name].value.slice();\n        const index = theValue.indexOf(value);\n        if (index === -1) {\n          theValue.push(value);\n        } else {\n          theValue.splice(index, 1);\n        }\n      } else {\n        theValue = value;\n      }\n      // Synchronize values external state\n      if (this.props.values) {\n        this.props.values[name] = theValue;\n      }\n      // Assemble and delay validate\n      this.assembleFieldChange(name, theValue).delayValidateField(name, theValue);\n      // Update\n      this.setState({\n        fields,\n      });\n      this.formDidChange({ [name]: theValue });\n    };\n\n    /**\n     * Customize to change the values\n     * @param values\n     */\n    changeValues = (values) => {\n      const { fields } = this.state;\n      // Initializes\n      this.init(values);\n      Object.keys(values).forEach(name => this.assembleFieldChange(name, values[name])\n        .delayValidateField(name, values[name]));\n      // Update\n      this.setState({\n        fields,\n      });\n      this.formDidChange(values);\n      return this;\n    };\n\n    /**\n     * Add one or more validation rules\n     * @param schema\n     */\n    addSchemas = (schema) => {\n      Object.assign(this.schemas, schema);\n      return this;\n    };\n\n    /**\n     * Delete one or more validation rules\n     * If there is no name, it will all be removed.\n     * @param names\n     */\n    removeSchemas = (...names) => {\n      if (names.length) {\n        names.forEach((name) => {\n          delete this.schemas[name];\n        });\n      } else {\n        this.schemas = {};\n      }\n      // Validate the deleted status\n      this.validateByNames(...names);\n      return this;\n    };\n\n    /**\n     * Add one or more fields\n     * @param values\n     */\n    addValues = (values) => {\n      const { fields } = this.state;\n      // Initializes\n      this.init(values);\n      // Update\n      this.setState({\n        fields,\n      });\n      this.formDidChange(values);\n      return this;\n    };\n\n    /**\n     * Deletes one or more fields\n     * If there is no name, it will all be removed.\n     * @param names\n     */\n    removeValues = (...names) => {\n      const { fields } = this.state;\n      if (names.length) {\n        names.forEach((name) => {\n          delete fields[name];\n          if (this.props.values) {\n            delete this.props.values[name];\n          }\n        });\n      } else {\n        // Remove all\n        Object.keys(fields).forEach((name) => {\n          delete this.state.fields[name];\n          if (this.props.values) {\n            delete this.props.values[name];\n          }\n        });\n      }\n      // Update\n      this.setState({\n        fields,\n      });\n      this.formDidChange({});\n      return this;\n    };\n\n    /**\n     * Reset one or more fields\n     * If there is no name, it will all be init.\n     * @param names\n     */\n    resetValues = (...names) => {\n      const { fields } = this.state;\n      const values = {};\n      if (names.length) {\n        names.forEach((name) => {\n          values[name] = this.originalValues[name];\n        });\n        this.init(values);\n      } else {\n        // Init all\n        Object.assign(values, this.originalValues);\n        this.init(values);\n      }\n      // Update\n      this.setState({\n        fields,\n      });\n      this.formDidChange(values);\n      return this;\n    };\n\n    /**\n     * Validate the component through names\n     * @param names\n     * @return {Boolean}\n     */\n    validateByNames = async (...names) => {\n      const result = await this.validateFieldsByNames(...names);\n      const { fields } = this.state;\n      // Update\n      this.setState({\n        fields,\n      });\n      return result;\n    };\n\n    /**\n     * Validate all\n     * @return {Boolean}\n     */\n    validate = () => {\n      const names = Object.keys(this.schemas);\n      return this.validateByNames(...names);\n    };\n\n    // After change\n    formDidChange = noop;\n\n    render() {\n      return (\n        <FormComponent\n          {...this.props}\n          formControl={this}\n        />\n      );\n    }\n  }\n);\n"]}