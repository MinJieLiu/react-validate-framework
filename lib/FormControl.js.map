{"version":3,"sources":["../src/FormControl.jsx"],"names":["required","field","Array","isArray","value","length","props","values","fields","Object","keys","forEach","name","state","assign","FormComponent","validator","nextProps","setState","schema","schemas","validateByField","result","error","message","handleChange","handleValidate","formValues","propTypes","object","isRequired","onChange","func","e","target","type","theValue","slice","index","findIndex","item","push","splice","validateField","validateFields","every"],"mappings":"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","file":"FormControl.js","sourcesContent":["/**\n * Created by MingYi on 2016/12/23.\n */\n\nimport React, { Component, PropTypes } from 'react';\nimport validateFramework from 'validate-framework/lib/validate';\n\n/**\n * 扩展必填验证方法，支持数组判断\n * @param field\n * @return {boolean}\n */\nvalidateFramework.required = (field) => {\n  if (typeof field === 'string') {\n    return field !== '';\n  } else if (Array.isArray(field.value)) {\n    return field.value.length;\n  }\n  return field.value !== null && field.value !== '';\n};\n\n/**\n * 包装组件方法\n * @param schemas\n */\nexport default schemas => FormComponent => (\n\n  /**\n   * 验证组件\n   */\n  class FormControl extends Component {\n\n    static propTypes = {\n      values: PropTypes.object.isRequired,\n      onChange: PropTypes.func,\n    };\n\n    constructor(props) {\n      super(props);\n      const values = props.values;\n\n      // 将初始化数据组装成 fields\n      const fields = {};\n      Object.keys(values).forEach((name) => {\n        fields[name] = {\n          value: values[name],\n        };\n      });\n\n      this.state = {\n        fields,\n      };\n\n      // 自定义验证方法\n      Object.assign(validateFramework, FormComponent.validator);\n      this.validator = {\n        ...validateFramework,\n      };\n    }\n\n    componentWillReceiveProps(nextProps) {\n      const { values } = nextProps;\n      const { fields } = this.state;\n      Object.keys(values).forEach((name) => {\n        fields[name] = {\n          ...fields[name],\n          value: values[name],\n        };\n      });\n      this.setState({\n        fields,\n      });\n    }\n\n    /**\n     * 获取表单值列表\n     * @return {{}}\n     */\n    get formValues() {\n      const { fields } = this.state;\n      const values = {};\n      Object.keys(fields).forEach((name) => {\n        values[name] = fields[name].value;\n      });\n      return values;\n    }\n\n    /**\n     * 验证单个域\n     * @param name\n     * @param value\n     * @return {*}\n     */\n    validateField(name, value) {\n      // 验证\n      const schema = {\n        ...schemas[name],\n        value,\n      };\n      return this.validator.validateByField(schema);\n    }\n\n    /**\n     * 验证所有\n     * @return {Object} fields\n     */\n    validateFields() {\n      const { fields } = this.state;\n      Object.keys(schemas).forEach((name) => {\n        const schema = {\n          ...schemas[name],\n          value: fields[name].value,\n        };\n        const { result, error } = this.validator.validateByField(schema);\n        Object.assign(fields[name], {\n          result,\n          message: error ? error.message : null,\n        });\n      });\n\n      this.setState({\n        fields,\n      });\n    }\n\n    handleChange = (e) => {\n      const { name, type, value } = e.target;\n      const { onChange } = this.props;\n      const { fields } = this.state;\n\n      // 无 name 值\n      if (!name) {\n        return;\n      }\n\n      let theValue;\n      // checkbox 处理\n      if (type === 'checkbox') {\n        theValue = fields[name].value.slice();\n        const index = theValue.findIndex(item => item === value);\n        if (index === -1) {\n          theValue.push(value);\n        } else {\n          theValue.splice(index, 1);\n        }\n      } else {\n        theValue = value;\n      }\n\n      // 验证并获得结果\n      const { result, error } = this.validateField(name, theValue);\n\n      // 设置值\n      this.setState({\n        fields: {\n          ...fields,\n          [name]: {\n            value: theValue,\n            result,\n            message: error ? error.message : null,\n          },\n        },\n      });\n\n      // callback\n      if (onChange) {\n        onChange(e);\n      }\n    };\n\n    // 验证当前组件\n    handleValidate = () => {\n      // 验证\n      this.validateFields();\n      const { fields } = this.state;\n      return Object.keys(fields).every(name => fields[name].result === true);\n    };\n\n    render() {\n      const { fields } = this.state;\n\n      return (\n        <FormComponent\n          {...this.props}\n          fields={fields}\n          onChange={this.handleChange}\n          validate={this.handleValidate}\n          formValues={this.formValues}\n        />\n      );\n    }\n  }\n);\n"]}