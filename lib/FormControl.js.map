{"version":3,"sources":["../src/FormControl.jsx"],"names":["required","field","Array","isArray","value","length","props","values","fields","Object","keys","forEach","name","state","validator","assign","FormComponent","nextProps","onChange","newValue","assembleFieldValidate","setState","schema","schemas","validateByField","result","error","message","formValues","handleChange","handleValidate","handleValidateByName","handleAddFields","handleRemoveFields","handleAddSchemas","handleRemoveSchemas","propTypes","object","isRequired","func","addFields","removeFields","e","target","type","theValue","slice","index","findIndex","item","push","splice","validateField","names","newFields","validateFields","every"],"mappings":"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","file":"FormControl.js","sourcesContent":["/**\n * Created by MingYi on 2016/12/23.\n */\n\nimport React, { Component, PropTypes } from 'react';\nimport validateFramework from 'validate-framework/lib/validate';\n\n/**\n * 扩展必填验证方法，支持数组判断\n * @param field\n * @return {boolean}\n */\nvalidateFramework.required = (field) => {\n  if (typeof field === 'string') {\n    return field !== '';\n  } else if (Array.isArray(field.value)) {\n    return field.value.length;\n  }\n  return field.value !== null && field.value !== '';\n};\n\n/**\n * 包装组件方法\n * @param schemas\n */\nexport default schemas => FormComponent => (\n\n  /**\n   * 验证组件\n   */\n  class FormControl extends Component {\n\n    static propTypes = {\n      values: PropTypes.object.isRequired,\n      onChange: PropTypes.func,\n      addFields: PropTypes.func,\n      removeFields: PropTypes.func,\n    };\n\n    constructor(props) {\n      super(props);\n      const values = props.values;\n\n      // 将初始化数据组装成 fields\n      const fields = {};\n      Object.keys(values).forEach((name) => {\n        fields[name] = {\n          value: values[name],\n        };\n      });\n\n      this.state = {\n        fields,\n      };\n\n      // 自定义验证方法\n      this.validator = Object.assign(validateFramework, FormComponent.validator);\n    }\n\n    componentWillReceiveProps(nextProps) {\n      // 受控组件从父组件中更新 state\n      const { values, onChange } = nextProps;\n      if (!onChange) {\n        return;\n      }\n      const { fields } = this.state;\n      Object.keys(values).forEach((name) => {\n        const newValue = values[name];\n        // 存在，则验证新的数据\n        if (fields[name]) {\n          // diff 验证\n          if (fields[name].value !== newValue) {\n            this.assembleFieldValidate(name, newValue);\n          }\n        } else {\n          // 添加新的 field\n          fields[name] = {\n            value: newValue,\n          };\n        }\n      });\n\n      this.setState({\n        fields,\n      });\n    }\n\n    /**\n     * 获取表单值列表\n     * @return {Object}\n     */\n    get formValues() {\n      const { fields } = this.state;\n      const values = {};\n      Object.keys(fields).forEach((name) => {\n        values[name] = fields[name].value;\n      });\n      return values;\n    }\n\n    /**\n     * 组装数据\n     * 此方法改变了状态，下个组件中集中更新 state\n     * @param name\n     * @param value\n     */\n    assembleFieldValidate(name, value) {\n      const { fields } = this.state;\n      // 验证\n      // 无 schema 则不验证\n      const schema = schemas[name] && Object.assign(schemas[name], { value });\n      const { result, error } = schema ? this.validator.validateByField(schema) : {};\n\n      // 组装\n      Object.assign(fields[name], {\n        value,\n        result,\n        message: error ? error.message : null,\n      });\n    }\n\n    /**\n     * 验证单个域\n     * @param name\n     * @param value\n     * @return {Boolean}\n     */\n    validateField(name, value) {\n      const { fields } = this.state;\n      // 组装数据\n      this.assembleFieldValidate(name, value);\n      // 集中更新\n      this.setState({\n        fields,\n      });\n\n      return fields[name].result;\n    }\n\n    /**\n     * 验证所有\n     * @return {Object} fields\n     */\n    validateFields() {\n      const { fields } = this.state;\n      Object.keys(schemas).forEach((name) => {\n        // 组装数据\n        this.assembleFieldValidate(name, fields[name].value);\n      });\n      // 集中更新\n      this.setState({\n        fields,\n      });\n    }\n\n    // 表单改变事件监听\n    handleChange = (e) => {\n      // 受控组件让父组件管理改变事件\n      const { onChange } = this.props;\n      if (onChange) {\n        onChange(e);\n        return;\n      }\n\n      const { name, type, value } = e.target;\n      const { fields } = this.state;\n\n      // 依赖 name 属性\n      if (!name) {\n        return;\n      }\n\n      let theValue;\n      // checkbox 处理\n      if (type === 'checkbox') {\n        theValue = fields[name].value.slice();\n        const index = theValue.findIndex(item => item === value);\n        if (index === -1) {\n          theValue.push(value);\n        } else {\n          theValue.splice(index, 1);\n        }\n      } else {\n        theValue = value;\n      }\n\n      // 验证并更新\n      this.validateField(name, theValue);\n    };\n\n    /**\n     * 添加一条或多条验证规则\n     * @param schema\n     */\n    handleAddSchemas = (schema) => {\n      Object.assign(schemas, schema);\n    };\n\n    /**\n     * 删除一条或多条验证规则\n     * @param names\n     */\n    handleRemoveSchemas = (names) => {\n      names.forEach((name) => {\n        delete schemas[name]; // eslint-disable-line no-param-reassign\n      });\n    };\n\n    /**\n     * 添加一条或多条域\n     * @param newFields\n     */\n    handleAddFields = (newFields) => {\n      const { addFields } = this.props;\n      const { fields } = this.state;\n      Object.assign(fields, newFields);\n      this.setState({\n        fields,\n      });\n      // 调用父组件添加域\n      if (addFields) {\n        addFields(newFields);\n      }\n    };\n\n    /**\n     * 删除一条或多条域\n     * @param names\n     */\n    handleRemoveFields = (names) => {\n      const { removeFields } = this.props;\n      const { fields } = this.state;\n      names.forEach((name) => {\n        delete fields[name];\n      });\n      this.setState({\n        fields,\n      });\n      // 调用父组件删除域\n      if (removeFields) {\n        removeFields(names);\n      }\n    };\n\n    /**\n     * 通过 name 手动验证单个组件\n     * @param name\n     * @return {Boolean}\n     */\n    handleValidateByName = (name) => {\n      const { fields } = this.state;\n      const value = fields[name].value;\n      return this.validateField(name, value);\n    };\n\n    // 验证当前组件\n    handleValidate = () => {\n      // 验证\n      this.validateFields();\n      const { fields } = this.state;\n      // 排除 验证成功 和 未验证 状态\n      return Object.keys(fields).every(name => fields[name].result !== false);\n    };\n\n    render() {\n      const { fields } = this.state;\n\n      return (\n        <FormComponent\n          {...this.props}\n          fields={fields}\n          formValues={this.formValues}\n          onChange={this.handleChange}\n          validate={this.handleValidate}\n          validateByName={this.handleValidateByName}\n          addFields={this.handleAddFields}\n          removeFields={this.handleRemoveFields}\n          addSchemas={this.handleAddSchemas}\n          removeSchemas={this.handleRemoveSchemas}\n        />\n      );\n    }\n  }\n);\n"]}