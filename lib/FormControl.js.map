{"version":3,"sources":["../src/FormControl.jsx"],"names":["props","values","fields","Object","keys","forEach","name","value","state","nextProps","setState","handleChange","handleValidate","formValues","propTypes","object","isRequired","onChange","func","validateField","schema","schemas","validateByField","validateFields","result","error","assign","message","e","target","type","theValue","slice","index","findIndex","item","push","splice","every"],"mappings":"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","file":"FormControl.js","sourcesContent":["/**\n * Created by MingYi on 2016/12/23.\n */\n\nimport React, { Component, PropTypes } from 'react';\nimport validator from 'validate-framework/lib/validate';\n\nexport default schemas => FormComponent => (\n\n  /**\n   * 验证组件\n   */\n  class FormControl extends Component {\n\n    static propTypes = {\n      values: PropTypes.object.isRequired,\n      onChange: PropTypes.func,\n    };\n\n    constructor(props) {\n      super(props);\n      const values = props.values;\n\n      // 将初始化数据组装成 fields\n      const fields = {};\n      Object.keys(values).forEach((name) => {\n        fields[name] = {\n          value: values[name],\n        };\n      });\n\n      this.state = {\n        fields,\n      };\n    }\n\n    componentWillReceiveProps(nextProps) {\n      const { values } = nextProps;\n      const { fields } = this.state;\n      Object.keys(values).forEach((name) => {\n        fields[name] = {\n          ...fields[name],\n          value: values[name],\n        };\n      });\n      this.setState({\n        fields,\n      });\n    }\n\n    /**\n     * 获取表单值列表\n     * @return {{}}\n     */\n    get formValues() {\n      const { fields } = this.state;\n      const values = {};\n      Object.keys(fields).forEach((name) => {\n        values[name] = fields[name].value;\n      });\n      return values;\n    }\n\n    /**\n     * 验证单个域\n     * @param name\n     * @param value\n     * @return {*}\n     */\n    validateField = ({ name, value }) => {\n      // 验证\n      const schema = {\n        ...schemas[name],\n        value,\n      };\n      return validator.validateByField(schema);\n    };\n\n    /**\n     * 验证所有\n     * @return {Object} fields\n     */\n    validateFields = () => {\n      const { fields } = this.state;\n      Object.keys(schemas).forEach((name) => {\n        const schema = {\n          ...schemas[name],\n          value: fields[name].value,\n        };\n        const { result, error } = validator.validateByField(schema);\n        Object.assign(fields[name], {\n          result,\n          message: error ? error.message : null,\n        });\n      });\n\n      this.setState({\n        fields,\n      });\n    };\n\n    handleChange = (e) => {\n      const { name, type, value } = e.target;\n      const { onChange } = this.props;\n      const { fields } = this.state;\n\n      // 无 name 值\n      if (!name) {\n        return;\n      }\n\n      let theValue;\n      // checkbox 处理\n      if (type === 'checkbox') {\n        theValue = fields[name].value.slice();\n        const index = theValue.findIndex(item => item === value);\n        if (index === -1) {\n          theValue.push(value);\n        } else {\n          theValue.splice(index, 1);\n        }\n      } else {\n        theValue = value;\n      }\n\n      // 验证并获得结果\n      const { result, error } = this.validateField({ name, value });\n\n      // 设置值\n      this.setState({\n        fields: {\n          ...fields,\n          [name]: {\n            value: theValue,\n            result,\n            message: error ? error.message : null,\n          },\n        },\n      });\n\n      // callback\n      if (onChange) {\n        onChange(e);\n      }\n    };\n\n    // 验证当前组件\n    handleValidate = () => {\n      // 验证\n      this.validateFields();\n      const { fields } = this.state;\n      return Object.keys(fields).every(name => fields[name].result === true);\n    };\n\n    render() {\n      const { fields } = this.state;\n\n      return (\n        <FormComponent\n          {...this.props}\n          fields={fields}\n          onChange={this.handleChange}\n          validate={this.handleValidate}\n          formValues={this.formValues}\n        />\n      );\n    }\n  }\n);\n"]}