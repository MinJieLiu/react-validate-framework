{"version":3,"sources":["../src/FormControl.jsx"],"names":["required","field","Array","isArray","value","length","props","values","fields","Object","keys","forEach","name","state","validator","assign","FormComponent","nextProps","onChange","newValue","assembleFieldValidate","setState","schema","schemas","validateByField","result","error","message","formValues","handleChange","handleValidate","handleValidateByName","propTypes","object","isRequired","func","e","target","type","theValue","slice","index","findIndex","item","push","splice","validateField","validateFields","every"],"mappings":"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","file":"FormControl.js","sourcesContent":["/**\r\n * Created by MingYi on 2016/12/23.\r\n */\r\n\r\nimport React, { Component, PropTypes } from 'react';\r\nimport validateFramework from 'validate-framework/lib/validate';\r\n\r\n/**\r\n * 扩展必填验证方法，支持数组判断\r\n * @param field\r\n * @return {boolean}\r\n */\r\nvalidateFramework.required = (field) => {\r\n  if (typeof field === 'string') {\r\n    return field !== '';\r\n  } else if (Array.isArray(field.value)) {\r\n    return field.value.length;\r\n  }\r\n  return field.value !== null && field.value !== '';\r\n};\r\n\r\n/**\r\n * 包装组件方法\r\n * @param schemas\r\n */\r\nexport default schemas => FormComponent => (\r\n\r\n  /**\r\n   * 验证组件\r\n   */\r\n  class FormControl extends Component {\r\n\r\n    static propTypes = {\r\n      values: PropTypes.object.isRequired,\r\n      onChange: PropTypes.func,\r\n    };\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      const values = props.values;\r\n\r\n      // 将初始化数据组装成 fields\r\n      const fields = {};\r\n      Object.keys(values).forEach((name) => {\r\n        fields[name] = {\r\n          value: values[name],\r\n        };\r\n      });\r\n\r\n      this.state = {\r\n        fields,\r\n      };\r\n\r\n      // 自定义验证方法\r\n      this.validator = Object.assign(validateFramework, FormComponent.validator);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n      // 受控组件从父组件中更新 state\r\n      const { values, onChange } = nextProps;\r\n      if (!onChange) {\r\n        return;\r\n      }\r\n      const { fields } = this.state;\r\n      Object.keys(values).forEach((name) => {\r\n        const newValue = values[name];\r\n        // 存在，则验证新的数据\r\n        if (fields[name]) {\r\n          // diff 验证\r\n          if (fields[name].value !== newValue) {\r\n            this.assembleFieldValidate(name, newValue);\r\n          }\r\n        } else {\r\n          // 添加新的 field\r\n          fields[name] = {\r\n            value: newValue,\r\n          }\r\n        }\r\n      });\r\n\r\n      this.setState({\r\n        fields,\r\n      });\r\n    }\r\n\r\n    /**\r\n     * 获取表单值列表\r\n     * @return {Object}\r\n     */\r\n    get formValues() {\r\n      const { fields } = this.state;\r\n      const values = {};\r\n      Object.keys(fields).forEach((name) => {\r\n        values[name] = fields[name].value;\r\n      });\r\n      return values;\r\n    }\r\n\r\n    /**\r\n     * 组装数据\r\n     * 此方法改变了状态，下个组件中集中更新 state\r\n     * @param name\r\n     * @param value\r\n     */\r\n    assembleFieldValidate(name, value) {\r\n      const { fields } = this.state;\r\n      // 验证\r\n      // 无 schema 则不验证\r\n      const schema = schemas[name] && Object.assign(schemas[name], { value });\r\n      const { result, error } = schema ? this.validator.validateByField(schema) : {};\r\n\r\n      // 组装\r\n      Object.assign(fields[name], {\r\n        value,\r\n        result,\r\n        message: error ? error.message : null,\r\n      });\r\n    }\r\n\r\n    /**\r\n     * 验证单个域\r\n     * @param name\r\n     * @param value\r\n     * @return {Boolean}\r\n     */\r\n    validateField(name, value) {\r\n      const { fields } = this.state;\r\n      // 组装数据\r\n      this.assembleFieldValidate(name, value);\r\n      // 集中更新\r\n      this.setState({\r\n        fields,\r\n      });\r\n\r\n      return fields[name].result;\r\n    }\r\n\r\n    /**\r\n     * 验证所有\r\n     * @return {Object} fields\r\n     */\r\n    validateFields() {\r\n      const { fields } = this.state;\r\n      Object.keys(schemas).forEach((name) => {\r\n        // 组装数据\r\n        this.assembleFieldValidate(name, fields[name].value);\r\n      });\r\n      // 集中更新\r\n      this.setState({\r\n        fields,\r\n      });\r\n    }\r\n\r\n    // 表单改变事件监听\r\n    handleChange = (e) => {\r\n      // 受控组件让父组件管理改变事件\r\n      const { onChange } = this.props;\r\n      if (onChange) {\r\n        onChange(e);\r\n        return;\r\n      }\r\n\r\n      const { name, type, value } = e.target;\r\n      const { fields } = this.state;\r\n\r\n      // 依赖 name 属性\r\n      if (!name) {\r\n        return;\r\n      }\r\n\r\n      let theValue;\r\n      // checkbox 处理\r\n      if (type === 'checkbox') {\r\n        theValue = fields[name].value.slice();\r\n        const index = theValue.findIndex(item => item === value);\r\n        if (index === -1) {\r\n          theValue.push(value);\r\n        } else {\r\n          theValue.splice(index, 1);\r\n        }\r\n      } else {\r\n        theValue = value;\r\n      }\r\n\r\n      // 验证并更新\r\n      this.validateField(name, theValue);\r\n    };\r\n\r\n    /**\r\n     * 通过 name 手动验证单个组件\r\n     * @param name\r\n     * @return {Boolean}\r\n     */\r\n    handleValidateByName = (name) => {\r\n      const { fields } = this.state;\r\n      const value = fields[name].value;\r\n      return this.validateField(name, value);\r\n    };\r\n\r\n    // 验证当前组件\r\n    handleValidate = () => {\r\n      // 验证\r\n      this.validateFields();\r\n      const { fields } = this.state;\r\n      // 排除 验证成功 和 未验证 状态\r\n      return Object.keys(fields).every(name => fields[name].result !== false);\r\n    };\r\n\r\n    render() {\r\n      const { fields } = this.state;\r\n\r\n      return (\r\n        <FormComponent\r\n          {...this.props}\r\n          fields={fields}\r\n          formValues={this.formValues}\r\n          onChange={this.handleChange}\r\n          validate={this.handleValidate}\r\n          validateByName={this.handleValidateByName}\r\n        />\r\n      );\r\n    }\r\n  }\r\n);\r\n"]}