{"version":3,"sources":["../src/FormControl.jsx"],"names":["schemas","methods","props","classNames","values","fields","Object","keys","forEach","name","className","static","value","state","validator","addMethods","nextProps","newValue","assembleFieldValidate","setState","schema","assign","validateByField","result","error","classNameArray","success","filter","item","join","message","isValid","names","validateField","validateByNames","isAllValid","formValues","handleChange","handleValidate","handleValidateByNames","handleAddFields","handleRemoveFields","handleAddSchemas","handleRemoveSchemas","propTypes","object","isRequired","defaultProps","e","target","type","theValue","slice","index","findIndex","push","splice","newFields","validateAllFields"],"mappings":"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","file":"FormControl.js","sourcesContent":["/**\n * Created by MingYi on 2016/12/23.\n */\n\nimport React, { Component, PropTypes } from 'react';\nimport Validator from 'validate-framework-utils';\n\n/**\n * React form 验证组件\n * @param schemas 验证规则\n * @param methods 扩展验证方法\n * @return Component\n */\nexport default (schemas, methods) => FormComponent => (\n\n  /**\n   * 验证组件\n   */\n  class FormControl extends Component {\n\n    static propTypes = {\n      values: PropTypes.object.isRequired,\n      classNames: PropTypes.object,\n    };\n\n    static defaultProps = {\n      classNames: {},\n    };\n\n    constructor(props) {\n      super(props);\n      const { classNames, values } = props;\n\n      // 将初始化数据组装成 fields\n      const fields = {};\n      Object.keys(values).forEach((name) => {\n        fields[name] = {\n          className: classNames.static,\n          value: values[name],\n        };\n      });\n\n      this.state = {\n        fields,\n      };\n\n      // 初始化验证组件并自定义验证方法\n      this.validator = new Validator().addMethods(methods);\n    }\n\n    componentWillReceiveProps(nextProps) {\n      // 从父组件中更新 state\n      const { values } = nextProps;\n      const { classNames } = this.props;\n      const { fields } = this.state;\n\n      Object.keys(values).forEach((name) => {\n        const newValue = values[name];\n        // 存在，则验证新的数据\n        if (fields[name]) {\n          // diff 验证\n          if (fields[name].value !== newValue) {\n            this.assembleFieldValidate(name, newValue);\n          }\n        } else {\n          // 不存在，则添加新的 field\n          fields[name] = {\n            className: classNames.static,\n            value: newValue,\n          };\n        }\n      });\n\n      this.setState({\n        fields,\n      });\n    }\n\n    /**\n     * 获取表单值列表\n     * @return {Object}\n     */\n    get formValues() {\n      const { fields } = this.state;\n      const values = {};\n      Object.keys(fields).forEach((name) => {\n        values[name] = fields[name].value;\n      });\n      return values;\n    }\n\n    /**\n     * 组装数据\n     * 此方法不 setState\n     * @param name\n     * @param value\n     */\n    assembleFieldValidate(name, value) {\n      const { classNames } = this.props;\n      const { fields } = this.state;\n      // 验证\n      // 无 schema 则不验证\n      const schema = schemas[name] && Object.assign(schemas[name], { value });\n      const { result, error } = schema ? this.validator.validateByField(schema) : {};\n      // 组装类名\n      // 验证成功和验证失败添加相应类\n      const classNameArray = [\n        classNames.static,\n        result ? classNames.success : null,\n        result === false ? classNames.error : null,\n      ];\n      // 组装\n      Object.assign(fields[name], {\n        value,\n        className: classNameArray.filter(item => item).join('\\u{20}'),\n        result,\n        message: error ? error.message : null,\n      });\n    }\n\n    /**\n     * 验证单个域\n     * @param name\n     * @param value\n     * @return {Boolean}\n     */\n    validateField(name, value) {\n      const { fields } = this.state;\n      // 组装数据\n      this.assembleFieldValidate(name, value);\n      return fields[name].result;\n    }\n\n    /**\n     * 通过 names 验证\n     * @param names\n     * @return {Boolean}\n     */\n    validateByNames(...names) {\n      const { fields } = this.state;\n      let isValid = true;\n      names.forEach((name) => {\n        const result = this.validateField(name, fields[name].value);\n        // 排除 未验证 和 验证成功\n        if (result === false) {\n          isValid = false;\n        }\n      });\n      return isValid;\n    }\n\n    /**\n     * 验证所有域\n     * @return {Boolean}\n     */\n    validateAllFields() {\n      const names = Object.keys(schemas);\n      return this.validateByNames(...names);\n    }\n\n    // 表单改变事件监听\n    handleChange = (e) => {\n      const { name, type, value } = e.target;\n      const { fields } = this.state;\n\n      // 依赖 name 属性\n      if (!name) {\n        return;\n      }\n\n      let theValue;\n      // checkbox 处理\n      if (type === 'checkbox') {\n        theValue = fields[name].value.slice();\n        const index = theValue.findIndex(item => item === value);\n        if (index === -1) {\n          theValue.push(value);\n        } else {\n          theValue.splice(index, 1);\n        }\n      } else {\n        theValue = value;\n      }\n\n      // 验证\n      this.validateField(name, theValue);\n\n      // 更新\n      this.setState({\n        fields,\n      });\n    };\n\n    /**\n     * 添加一条或多条验证规则\n     * @param schema\n     */\n    handleAddSchemas = (schema) => {\n      Object.assign(schemas, schema);\n    };\n\n    /**\n     * 删除一条或多条验证规则\n     * @param names\n     */\n    handleRemoveSchemas = (names) => {\n      names.forEach((name) => {\n        delete schemas[name]; // eslint-disable-line no-param-reassign\n      });\n    };\n\n    /**\n     * 添加一条或多条域\n     * @param newFields\n     */\n    handleAddFields = (newFields) => {\n      const { classNames } = this.props;\n      const { fields } = this.state;\n      Object.keys(newFields).forEach((name) => {\n        Object.assign(newFields[name], {\n          className: classNames.static,\n        });\n      });\n      // 组装\n      Object.assign(fields, newFields);\n      // 更新\n      this.setState({\n        fields,\n      });\n    };\n\n    /**\n     * 删除一条或多条域\n     * @param names\n     */\n    handleRemoveFields = (names) => {\n      const { fields } = this.state;\n      names.forEach((name) => {\n        delete fields[name];\n      });\n      // 更新\n      this.setState({\n        fields,\n      });\n    };\n\n    /**\n     * 通过 names 验证组件\n     * @param names\n     * @return {Boolean}\n     */\n    handleValidateByNames = (...names) => {\n      const result = this.validateByNames(...names);\n      const { fields } = this.state;\n      // 更新\n      this.setState({\n        fields,\n      });\n      return result;\n    };\n\n    // 验证所有\n    handleValidate = () => {\n      // 验证\n      const isAllValid = this.validateAllFields();\n      const { fields } = this.state;\n      // 更新\n      this.setState({\n        fields,\n        isAllValid,\n      });\n      return isAllValid;\n    };\n\n    render() {\n      const { fields, isAllValid } = this.state;\n\n      return (\n        <FormComponent\n          {...this.props}\n          fields={fields}\n          isAllValid={isAllValid}\n          formValues={this.formValues}\n          onChange={this.handleChange}\n          validate={this.handleValidate}\n          validateByNames={this.handleValidateByNames}\n          addFields={this.handleAddFields}\n          removeFields={this.handleRemoveFields}\n          addSchemas={this.handleAddSchemas}\n          removeSchemas={this.handleRemoveSchemas}\n        />\n      );\n    }\n  }\n);\n"]}