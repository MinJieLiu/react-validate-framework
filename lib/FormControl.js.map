{"version":3,"sources":["../src/FormControl.jsx"],"names":["schemas","methods","props","classNames","values","delay","delayValidateField","bind","fields","Object","keys","forEach","name","className","static","value","state","validator","initField","init","onFormChange","nextProps","newValue","assembleFieldChange","setState","assembleFieldValidate","every","result","propTypes","object","number","childContextTypes","isRequired","func","defaultProps","classes","schema","validateByField","error","classNameArray","success","filter","item","join","message","undefined","validateField","validateFieldsByNames","names","isValid","e","target","type","theValue","slice","index","indexOf","push","splice","formDidChange","changeValues","addSchemas","removeSchemas","addValues","removeValues","validateByNames","validate"],"mappings":"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","file":"FormControl.js","sourcesContent":["/**\n * A lightweight and extensible React validation component\n */\n\nimport React, { Component, PropTypes } from 'react';\nimport Validator from 'validate-framework-utils';\nimport debounce from 'lodash/debounce';\n\n/**\n * React validation component\n * @param schemas\n * @param methods Extended Validation Method\n * @return Component\n */\nexport default (schemas, methods) => FormComponent => (\n\n  /**\n   * Returns a react form\n   */\n  class FormControl extends Component {\n\n    static propTypes = {\n      values: PropTypes.object,\n      classNames: PropTypes.object,\n      delay: PropTypes.number,\n    };\n\n    static childContextTypes = {\n      fields: PropTypes.object.isRequired,\n      initField: PropTypes.func.isRequired,\n      onFormChange: PropTypes.func.isRequired,\n    };\n\n    static defaultProps = {\n      classNames: {},\n      delay: 0,\n    };\n\n    schemas = Object.assign({}, schemas);\n\n    constructor(props) {\n      super(props);\n      const {\n        classNames,\n        values,\n        delay,\n      } = props;\n      // delay\n\n      if (delay) {\n        this.delayValidateField = debounce(this.delayValidateField.bind(this), delay);\n      }\n\n      const fields = {};\n      // Assemble the initialization data into fields\n      if (values) {\n        Object.keys(values).forEach((name) => {\n          fields[name] = {\n            className: classNames.static,\n            value: values[name],\n          };\n        });\n      }\n\n      this.state = {\n        fields,\n      };\n\n      // Initializes the validation component and customizes the validation method\n      this.validator = new Validator();\n      Object.assign(this.validator, methods, {\n        fields,\n      });\n    }\n\n    getChildContext() {\n      return {\n        fields: this.state.fields,\n        initField: this.init,\n        onFormChange: this.onFormChange,\n      };\n    }\n\n    componentWillReceiveProps(nextProps) {\n      const { values } = nextProps;\n      // No value\n      if (!values) {\n        return;\n      }\n      // Updates the state from the parent component\n      const { classNames } = this.props;\n      const { fields } = this.state;\n\n      Object.keys(values).forEach((name) => {\n        const newValue = values[name];\n        // Validate the new data\n        if (fields[name]) {\n          // diff\n          if (fields[name].value !== newValue) {\n            this.assembleFieldChange(name, newValue)\n              .delayValidateField(name, newValue);\n          }\n        } else {\n          // Add a new field\n          fields[name] = {\n            className: classNames.static,\n            value: newValue,\n          };\n        }\n      });\n\n      this.setState({\n        fields,\n      });\n    }\n\n    /**\n     * Get the fields object\n     * @returns {Object}\n     */\n    get fields() {\n      return this.state.fields;\n    }\n\n    /**\n     * Gets a list of form values\n     * @return {Object}\n     */\n    get formValues() {\n      const { fields } = this.state;\n      const values = {};\n      Object.keys(fields).forEach((name) => {\n        values[name] = fields[name].value;\n      });\n      return values;\n    }\n\n    /**\n     * Gets the global validation status\n     * @return {Boolean}\n     */\n    get isAllValid() {\n      const { fields } = this.state;\n      return Object.keys(this.schemas)\n        .every(name => fields[name] && fields[name].result);\n    }\n\n    /**\n     * Initializes the form value and classes\n     * @param values\n     * @param classes\n     */\n    init = (values, classes) => {\n      const { classNames } = this.props;\n      const { fields } = this.state;\n      // Merge\n      Object.assign(classNames, classes);\n      // Initialize\n      Object.keys(values).forEach((name) => {\n        const value = values[name];\n        fields[name] = {\n          className: classNames.static,\n          value,\n        };\n        // Synchronize values external state\n        if (this.props.values) {\n          this.props.values[name] = value;\n        }\n      });\n      return this;\n    };\n\n    /**\n     * Assemble the data\n     * This method is not operational\n     * @param name\n     * @param value\n     * @return {FormControl}\n     */\n    assembleFieldChange = (name, value) => {\n      Object.assign(this.state.fields[name], {\n        value,\n      });\n      return this;\n    };\n\n    /**\n     * Validate the data\n     * This method is not operational\n     * @param name\n     * @param value\n     * @return {FormControl}\n     */\n    assembleFieldValidate = (name, value) => {\n      const { classNames } = this.props;\n      const { fields } = this.state;\n      // No schema is not to validate\n      const schema = this.schemas[name] && Object.assign(this.schemas[name], { value });\n      const { result, error } = schema ? this.validator.validateByField(schema) : {};\n      // Assembly class name\n      // Validation success and validation failure Add the appropriate class\n      const classNameArray = [\n        classNames.static,\n        result ? classNames.success : null,\n        result === false ? classNames.error : null,\n      ];\n      // Assemble\n      Object.assign(fields[name], {\n        className: classNameArray.filter(item => item).join('\\u{20}'),\n        result,\n        message: error ? error.message : undefined,\n      });\n      return this;\n    };\n\n    /**\n     * Validate a single field\n     * @param name\n     * @param value\n     * @return {Boolean}\n     */\n    validateField = (name, value) => {\n      const { fields } = this.state;\n      // Assemble\n      this.assembleFieldValidate(name, value);\n      return fields[name].result;\n    };\n\n    /**\n     * DelayValidateField\n     * @param name\n     * @param value\n     */\n    delayValidateField(name, value) {\n      const { delay } = this.props;\n      const { fields } = this.state;\n      // Assemble\n      this.assembleFieldValidate(name, value);\n      // reduce diff\n      if (delay) {\n        this.setState({\n          fields,\n        });\n      }\n    }\n\n    /**\n     * Validate fields by names\n     * @param names\n     * @return {Boolean}\n     */\n    validateFieldsByNames = (...names) => {\n      const { fields } = this.state;\n      let isValid = true;\n      names.forEach((name) => {\n        const result = fields[name] && this.validateField(name, fields[name].value);\n        // Exclude unauthenticated and validated successfully\n        if (result === false) {\n          isValid = false;\n        }\n      });\n      return isValid;\n    };\n\n    // Form change event listener\n    onFormChange = (e) => {\n      const { name, type, value } = e.target;\n      const { fields } = this.state;\n\n      // Dependent on the name attribute\n      if (!name) {\n        return;\n      }\n\n      let theValue;\n      // Checkbox processing\n      if (type === 'checkbox') {\n        theValue = fields[name].value.slice();\n        const index = theValue.indexOf(value);\n        if (index === -1) {\n          theValue.push(value);\n        } else {\n          theValue.splice(index, 1);\n        }\n      } else {\n        theValue = value;\n      }\n      // Synchronize values external state\n      if (this.props.values) {\n        this.props.values[name] = theValue;\n      }\n      // Assemble and validate\n      this.assembleFieldChange(name, theValue).delayValidateField(name, theValue);\n      // Update\n      this.setState({\n        fields,\n      });\n      this.formDidChange();\n    };\n\n    /**\n     * Customize to change the values\n     * @param values\n     */\n    changeValues = (values) => {\n      const { fields } = this.state;\n      // Initializes\n      this.init(values);\n      Object.keys(values).forEach(name => this.assembleFieldChange(name, values[name])\n        .delayValidateField(name, values[name]));\n      // Update\n      this.setState({\n        fields,\n      });\n      this.formDidChange();\n      return this;\n    };\n\n    /**\n     * Add one or more validation rules\n     * @param schema\n     */\n    addSchemas = (schema) => {\n      Object.assign(this.schemas, schema);\n      return this;\n    };\n\n    /**\n     * Delete one or more validation rules\n     * @param names\n     */\n    removeSchemas = (...names) => {\n      const { fields } = this.state;\n      names.forEach((name) => {\n        delete this.schemas[name];\n      });\n      // Validate the deleted status\n      this.validateFieldsByNames(...names);\n      // Update\n      this.setState({\n        fields,\n      });\n      return this;\n    };\n\n    /**\n     * Add one or more fields\n     * @param values\n     */\n    addValues = (values) => {\n      const { fields } = this.state;\n      // Initializes\n      this.init(values);\n      // Update\n      this.setState({\n        fields,\n      });\n      this.formDidChange();\n      return this;\n    };\n\n    /**\n     * Deletes one or more fields\n     * @param names\n     */\n    removeValues = (...names) => {\n      const { fields } = this.state;\n      names.forEach((name) => {\n        delete fields[name];\n      });\n      // Update\n      this.setState({\n        fields,\n      });\n      this.formDidChange();\n      return this;\n    };\n\n    /**\n     * Validate the component through names\n     * @param names\n     * @return {Boolean}\n     */\n    validateByNames = (...names) => {\n      const result = this.validateFieldsByNames(...names);\n      const { fields } = this.state;\n      // Update\n      this.setState({\n        fields,\n      });\n      return result;\n    };\n\n    // Validate all\n    validate = () => {\n      const names = Object.keys(this.schemas);\n      return this.validateByNames(...names);\n    };\n\n    // After change\n    formDidChange = () => {\n    };\n\n    render() {\n      return (\n        <FormComponent\n          {...this.props}\n          formControl={this}\n        />\n      );\n    }\n  }\n);\n"]}