{"version":3,"sources":["../src/FormControl.jsx"],"names":["required","field","Array","isArray","value","length","props","values","fields","Object","keys","forEach","name","state","assign","FormComponent","validator","nextProps","setState","schema","schemas","validateByField","result","error","message","assembleFieldValidate","formValues","handleChange","handleValidate","handleValidateByName","propTypes","object","isRequired","onChange","func","e","target","type","theValue","slice","index","findIndex","item","push","splice","validateField","validateFields","every"],"mappings":"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","file":"FormControl.js","sourcesContent":["/**\n * Created by MingYi on 2016/12/23.\n */\n\nimport React, { Component, PropTypes } from 'react';\nimport validateFramework from 'validate-framework/lib/validate';\n\n/**\n * 扩展必填验证方法，支持数组判断\n * @param field\n * @return {boolean}\n */\nvalidateFramework.required = (field) => {\n  if (typeof field === 'string') {\n    return field !== '';\n  } else if (Array.isArray(field.value)) {\n    return field.value.length;\n  }\n  return field.value !== null && field.value !== '';\n};\n\n/**\n * 包装组件方法\n * @param schemas\n */\nexport default schemas => FormComponent => (\n\n  /**\n   * 验证组件\n   */\n  class FormControl extends Component {\n\n    static propTypes = {\n      values: PropTypes.object.isRequired,\n      onChange: PropTypes.func,\n    };\n\n    constructor(props) {\n      super(props);\n      const values = props.values;\n\n      // 将初始化数据组装成 fields\n      const fields = {};\n      Object.keys(values).forEach((name) => {\n        fields[name] = {\n          value: values[name],\n        };\n      });\n\n      this.state = {\n        fields,\n      };\n\n      // 自定义验证方法\n      Object.assign(validateFramework, FormComponent.validator);\n      this.validator = {\n        ...validateFramework,\n      };\n    }\n\n    componentWillReceiveProps(nextProps) {\n      const { values } = nextProps;\n      const { fields } = this.state;\n      Object.keys(values).forEach((name) => {\n        fields[name] = {\n          ...fields[name],\n          value: values[name],\n        };\n      });\n      this.setState({\n        fields,\n      });\n    }\n\n    /**\n     * 获取表单值列表\n     * @return {{}}\n     */\n    get formValues() {\n      const { fields } = this.state;\n      const values = {};\n      Object.keys(fields).forEach((name) => {\n        values[name] = fields[name].value;\n      });\n      return values;\n    }\n\n    /**\n     * 组装数据\n     * 此方法改变了状态，下个组件中集中更新 state\n     * @param name\n     * @param value\n     */\n    assembleFieldValidate(name, value) {\n      const { fields } = this.state;\n      // 验证\n      // 无 schema 则不验证\n      const schema = schemas[name] && Object.assign(schemas[name], { value });\n      const { result, error } = schema ? this.validator.validateByField(schema) : {};\n\n      // 组装\n      Object.assign(fields[name], {\n        value,\n        result,\n        message: error ? error.message : null,\n      });\n    }\n\n    /**\n     * 验证单个域\n     * @param name\n     * @param value\n     * @return {Boolean}\n     */\n    validateField(name, value) {\n      const { fields } = this.state;\n      // 组装数据\n      this.assembleFieldValidate(name, value);\n      // 集中更新\n      this.setState({\n        fields,\n      });\n\n      return fields[name].result;\n    }\n\n    /**\n     * 验证所有\n     * @return {Object} fields\n     */\n    validateFields() {\n      const { fields } = this.state;\n      Object.keys(schemas).forEach((name) => {\n        // 组装数据\n        this.assembleFieldValidate(name, fields[name].value);\n      });\n      // 集中更新\n      this.setState({\n        fields,\n      });\n    }\n\n    handleChange = (e) => {\n      const { name, type, value } = e.target;\n      const { onChange } = this.props;\n      const { fields } = this.state;\n\n      // 无 name 值\n      if (!name) {\n        return;\n      }\n\n      let theValue;\n      // checkbox 处理\n      if (type === 'checkbox') {\n        theValue = fields[name].value.slice();\n        const index = theValue.findIndex(item => item === value);\n        if (index === -1) {\n          theValue.push(value);\n        } else {\n          theValue.splice(index, 1);\n        }\n      } else {\n        theValue = value;\n      }\n\n      // 验证并更新\n      this.validateField(name, theValue);\n\n      // callback\n      if (onChange) {\n        onChange(e);\n      }\n    };\n\n    /**\n     * 通过 name 手动验证单个组件\n     * @param name\n     * @return {Boolean}\n     */\n    handleValidateByName = (name) => {\n      const { fields } = this.state;\n      const value = fields[name].value;\n      return this.validateField(name, value);\n    };\n\n    // 验证当前组件\n    handleValidate = () => {\n      // 验证\n      this.validateFields();\n      const { fields } = this.state;\n      // 排除 验证成功 和 未验证\n      return Object.keys(fields).every(name => fields[name].result !== false);\n    };\n\n    render() {\n      const { fields } = this.state;\n\n      return (\n        <FormComponent\n          {...this.props}\n          fields={fields}\n          formValues={this.formValues}\n          onChange={this.handleChange}\n          validate={this.handleValidate}\n          validateByName={this.handleValidateByName}\n        />\n      );\n    }\n  }\n);\n"]}