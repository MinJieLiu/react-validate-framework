{"version":3,"sources":["../src/FormControl.jsx"],"names":["props","classNames","values","fields","Object","keys","forEach","name","className","static","value","state","validator","addMethods","FormComponent","schema","schemas","assign","validateByField","result","error","classNameArray","success","filter","item","join","message","assembleFieldValidate","isValid","names","validateField","validateByNames","isAllValid","formValues","handleChange","handleValidate","handleValidateByNames","handleAddFields","handleRemoveFields","handleAddSchemas","handleRemoveSchemas","propTypes","object","isRequired","defaultProps","e","target","type","theValue","slice","index","findIndex","push","splice","setState","newFields","validateAllFields"],"mappings":"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","file":"FormControl.js","sourcesContent":["/**\n * Created by MingYi on 2016/12/23.\n */\n\nimport React, { Component, PropTypes } from 'react';\nimport Validator from 'validate-framework-utils';\n\n/**\n * React form 验证组件\n * @param schemas\n * @return Component\n */\nexport default schemas => FormComponent => (\n\n  /**\n   * 验证组件\n   */\n  class FormControl extends Component {\n\n    static propTypes = {\n      values: PropTypes.object.isRequired,\n      classNames: PropTypes.object,\n    };\n\n    static defaultProps = {\n      classNames: {},\n    };\n\n    constructor(props) {\n      super(props);\n      const { classNames, values } = props;\n\n      // 将初始化数据组装成 fields\n      const fields = {};\n      Object.keys(values).forEach((name) => {\n        fields[name] = {\n          className: classNames.static || '',\n          value: values[name],\n        };\n      });\n\n      this.state = {\n        fields,\n      };\n\n      // 初始化验证组件并自定义验证方法\n      this.validator = new Validator().addMethods(FormComponent.validator);\n    }\n\n    /**\n     * 获取表单值列表\n     * @return {Object}\n     */\n    get formValues() {\n      const { fields } = this.state;\n      const values = {};\n      Object.keys(fields).forEach((name) => {\n        values[name] = fields[name].value;\n      });\n      return values;\n    }\n\n    /**\n     * 组装数据\n     * 此方法改变了状态，下个组件中集中更新 state\n     * @param name\n     * @param value\n     */\n    assembleFieldValidate(name, value) {\n      const { classNames } = this.props;\n      const { fields } = this.state;\n      // 验证\n      // 无 schema 则不验证\n      const schema = schemas[name] && Object.assign(schemas[name], { value });\n      const { result, error } = schema ? this.validator.validateByField(schema) : {};\n      // 组装类名\n      // 验证成功和验证失败添加相应类\n      const classNameArray = [\n        classNames.static,\n        result ? classNames.success : null,\n        result === false ? classNames.error : null,\n      ];\n      // 组装\n      Object.assign(fields[name], {\n        value,\n        className: classNameArray.filter(item => item).join('\\u{20}'),\n        result,\n        message: error ? error.message : null,\n      });\n    }\n\n    /**\n     * 验证单个域\n     * @param name\n     * @param value\n     * @return {Boolean}\n     */\n    validateField(name, value) {\n      const { fields } = this.state;\n      // 组装数据\n      this.assembleFieldValidate(name, value);\n      return fields[name].result;\n    }\n\n    /**\n     * 通过 names 验证组件\n     * @param names\n     * @return {Boolean}\n     */\n    validateByNames(...names) {\n      const { fields } = this.state;\n      let isValid = true;\n      names.forEach((name) => {\n        const result = this.validateField(name, fields[name].value);\n        // 排除 未验证 和 验证成功\n        if (result === false) {\n          isValid = false;\n        }\n      });\n      return isValid;\n    }\n\n    /**\n     * 验证所有\n     * @return {Boolean}\n     */\n    validateAllFields() {\n      const names = Object.keys(schemas);\n      return this.validateByNames(...names);\n    }\n\n    // 表单改变事件监听\n    handleChange = (e) => {\n      const { name, type, value } = e.target;\n      const { fields } = this.state;\n\n      // 依赖 name 属性\n      if (!name) {\n        return;\n      }\n\n      let theValue;\n      // checkbox 处理\n      if (type === 'checkbox') {\n        theValue = fields[name].value.slice();\n        const index = theValue.findIndex(item => item === value);\n        if (index === -1) {\n          theValue.push(value);\n        } else {\n          theValue.splice(index, 1);\n        }\n      } else {\n        theValue = value;\n      }\n\n      // 验证\n      this.validateField(name, theValue);\n\n      // 更新\n      this.setState({\n        fields,\n      });\n    };\n\n    /**\n     * 添加一条或多条验证规则\n     * @param schema\n     */\n    handleAddSchemas = (schema) => {\n      Object.assign(schemas, schema);\n    };\n\n    /**\n     * 删除一条或多条验证规则\n     * @param names\n     */\n    handleRemoveSchemas = (names) => {\n      names.forEach((name) => {\n        delete schemas[name]; // eslint-disable-line no-param-reassign\n      });\n    };\n\n    /**\n     * 添加一条或多条域\n     * @param newFields\n     */\n    handleAddFields = (newFields) => {\n      const { classNames } = this.props;\n      const { fields } = this.state;\n      Object.keys(newFields).forEach((name) => {\n        Object.assign(newFields[name], {\n          className: classNames.static || '',\n        });\n      });\n      // 组装\n      Object.assign(fields, newFields);\n      // 更新\n      this.setState({\n        fields,\n      });\n    };\n\n    /**\n     * 删除一条或多条域\n     * @param names\n     */\n    handleRemoveFields = (names) => {\n      const { fields } = this.state;\n      names.forEach((name) => {\n        delete fields[name];\n      });\n      // 更新\n      this.setState({\n        fields,\n      });\n    };\n\n    /**\n     * 通过 names 验证组件\n     * @param names\n     * @return {Boolean}\n     */\n    handleValidateByNames = (...names) => {\n      const result = this.validateByNames(...names);\n      const { fields } = this.state;\n      // 更新\n      this.setState({\n        fields,\n      });\n      return result;\n    };\n\n    // 验证所有\n    handleValidate = () => {\n      // 验证\n      const isAllValid = this.validateAllFields();\n      const { fields } = this.state;\n      // 更新\n      this.setState({\n        fields,\n        isAllValid,\n      });\n      return isAllValid;\n    };\n\n    render() {\n      const { fields, isAllValid } = this.state;\n\n      return (\n        <FormComponent\n          {...this.props}\n          fields={fields}\n          isAllValid={isAllValid}\n          formValues={this.formValues}\n          onChange={this.handleChange}\n          validate={this.handleValidate}\n          validateByNames={this.handleValidateByNames}\n          addFields={this.handleAddFields}\n          removeFields={this.handleRemoveFields}\n          addSchemas={this.handleAddSchemas}\n          removeSchemas={this.handleRemoveSchemas}\n        />\n      );\n    }\n  }\n);\n"]}