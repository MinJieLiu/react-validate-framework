{"version":3,"sources":["../src/FormControl.jsx"],"names":["schemas","methods","props","classNames","values","state","fields","init","validator","Object","assign","formControl","nextProps","keys","name","theValue","value","String","handleAssembleFieldChange","className","static","setState","forEach","every","result","Component","propTypes","object","childContextTypes","isRequired","defaultProps","originalValues","classes","initClassNames","undefined","handleCreateDelayValidateFunc","ms","debounceValidateAndUpdate","handleAssembleFieldValidate","forceUpdate","delayFunc","schema","validateField","error","classNameArray","success","filter","item","join","message","handleValidateField","validateFieldsByNames","names","isValid","onFormChange","e","target","type","slice","index","indexOf","push","splice","formDidChange","changeValues","Promise","all","map","addSchemas","removeSchemas","length","validateByNames","addValues","removeValues","resetValues","validate"],"mappings":"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","file":"FormControl.js","sourcesContent":["/**\n * A lightweight and extensible React validation component\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Validator from 'validate-framework-utils';\nimport debounce from 'lodash.debounce';\nimport isNumber from 'lodash.isnumber';\n\n/**\n * React validation component\n * @param schemas\n * @param methods Extended Validation Method\n */\nexport default (schemas, methods) => FormComponent => (\n\n  /**\n   * Returns a react form\n   */\n  class FormControl extends React.Component {\n\n    static propTypes = {\n      values: PropTypes.object,\n      classNames: PropTypes.object,\n    };\n\n    static childContextTypes = {\n      formControl: PropTypes.object.isRequired,\n    };\n\n    static defaultProps = {\n      classNames: {},\n    };\n\n    schemas = { ...schemas };\n\n    // Original\n    originalValues = {};\n\n    constructor(props) {\n      super(props);\n      const {\n        classNames,\n        values,\n      } = props;\n\n      this.state = {\n        fields: {},\n      };\n\n      // Init\n      if (values) {\n        this.init(values, classNames);\n      }\n\n      // Initializes the validation component and customizes the validation method\n      this.validator = new Validator();\n      Object.assign(this.validator, methods, { fields: this.state.fields });\n    }\n\n    getChildContext() {\n      return {\n        formControl: this,\n      };\n    }\n\n    componentWillReceiveProps(nextProps) {\n      const { values } = nextProps;\n      // No value\n      if (!values) {\n        return;\n      }\n      // Updates the state from the parent component\n      const { classNames } = this.props;\n      const { fields } = this.state;\n\n      (async () => {\n        // eslint-disable-next-line no-restricted-syntax\n        for (const name of Object.keys(values)) {\n          const theValue = values[name];\n          // Convert to string\n          const value = isNumber(theValue) ? String(theValue) : theValue;\n          // Validate the new data\n          if (fields[name]) {\n            // diff\n            if (fields[name].value !== value) {\n              await this.handleAssembleFieldChange(name, value);\n            }\n          } else {\n            // Add a new field\n            fields[name] = {\n              className: classNames.static,\n              value,\n            };\n          }\n        }\n        // Update\n        this.setState({\n          fields,\n        });\n      })();\n    }\n\n    /**\n     * Get the fields object\n     * @returns {Object}\n     */\n    get fields() {\n      return this.state.fields;\n    }\n\n    /**\n     * Gets a list of form values\n     * @return {Object}\n     */\n    get formValues() {\n      const { fields } = this.state;\n      const values = {};\n      Object.keys(fields).forEach((name) => {\n        values[name] = fields[name].value;\n      });\n      return values;\n    }\n\n    /**\n     * Gets the global validation status\n     * @return {Boolean}\n     */\n    get isAllValid() {\n      const { fields } = this.state;\n      return Object\n        .keys(this.schemas)\n        .every(name => fields[name] && fields[name].result);\n    }\n\n    /**\n     * Initializes the form value and classes\n     * @param values\n     * @param classes\n     */\n    init = (values, classes) => {\n      const { fields } = this.state;\n      // Assign classNames\n      if (classes) {\n        this.initClassNames(classes);\n      }\n      // Initialize\n      Object.keys(values).forEach((name) => {\n        const theValue = values[name];\n        // Convert to string\n        const value = isNumber(theValue) ? String(theValue) : theValue;\n        fields[name] = {\n          className: this.props.classNames.static,\n          value,\n        };\n        // Only initialized once\n        if (this.originalValues[name] === undefined) {\n          this.originalValues[name] = value;\n        }\n        // Synchronize values external state\n        if (this.props.values) {\n          this.props.values[name] = value;\n        }\n      });\n      return this;\n    };\n\n    /**\n     * Init classNames\n     * @param classes\n     */\n    initClassNames = (classes) => {\n      // Merge\n      Object.assign(this.props.classNames, classes);\n      return this;\n    };\n\n    /**\n     * Create asynchronous validation\n     * See createField.jsx\n     * @param ms\n     * @return {Function}\n     */\n    handleCreateDelayValidateFunc = (ms) => {\n      const debounceValidateAndUpdate = async (...args) => {\n        await this.handleAssembleFieldValidate(...args);\n        this.forceUpdate();\n      };\n      return debounce(debounceValidateAndUpdate, ms);\n    };\n\n    /**\n     * Assemble the data\n     * This method is not operational\n     * @param name\n     * @param value\n     * @return {FormControl}\n     */\n    handleAssembleFieldChange = async (name, value) => {\n      const { fields } = this.state;\n      fields[name].value = value;\n      // Async\n      if (fields[name].delayFunc) {\n        fields[name].delayFunc(name, value);\n      } else {\n        await this.handleAssembleFieldValidate(name, value);\n      }\n    };\n\n    /**\n     * Validate the data\n     * This method is not operational\n     * @param name\n     * @param value\n     * @return {FormControl}\n     */\n    handleAssembleFieldValidate = async (name, value) => {\n      const { classNames } = this.props;\n      const { fields } = this.state;\n      // No schema is not to validate\n      const schema = this.schemas[name];\n      const { result, error } = schema\n        ? await this.validator.validateField({ ...schema, name })(value)\n        : {};\n\n      // Assembly class name\n      // Validation success and validation failure Add the appropriate class\n      const classNameArray = [\n        classNames.static,\n        result ? classNames.success : null,\n        result === false ? classNames.error : null,\n      ];\n      // Assemble\n      Object.assign(fields[name], {\n        className: classNameArray.filter(item => item).join('\\u{20}'),\n        result,\n        message: error ? error.message : undefined,\n      });\n      return this;\n    };\n\n    /**\n     * Validate a single field\n     * @param name\n     * @param value\n     * @return {Boolean}\n     */\n    handleValidateField = async (name, value) => {\n      const { fields } = this.state;\n      // Assemble\n      await this.handleAssembleFieldValidate(name, value);\n      return fields[name].result;\n    };\n\n    /**\n     * Validate fields by names\n     * @param names\n     * @return {Boolean}\n     */\n    validateFieldsByNames = async (...names) => {\n      const { fields } = this.state;\n      let isValid = true;\n      // eslint-disable-next-line no-restricted-syntax\n      for (const name of names) {\n        const result = fields[name] && await this.handleValidateField(name, fields[name].value);\n        // Exclude unauthenticated and validated successfully\n        if (result === false) {\n          isValid = false;\n        }\n      }\n      return isValid;\n    };\n\n    // Form change event listener\n    onFormChange = async (e) => {\n      const { name, type, value } = e.target;\n      const { fields } = this.state;\n\n      // Dependent on the name attribute\n      if (!name) {\n        return;\n      }\n\n      let theValue;\n      // Checkbox processing\n      if (type === 'checkbox') {\n        theValue = fields[name].value.slice();\n        const index = theValue.indexOf(value);\n        if (index === -1) {\n          theValue.push(value);\n        } else {\n          theValue.splice(index, 1);\n        }\n      } else {\n        theValue = value;\n      }\n      // Synchronize values external state\n      if (this.props.values) {\n        this.props.values[name] = theValue;\n      }\n      // Assemble and delay validate\n      await this.handleAssembleFieldChange(name, theValue);\n      // Update\n      this.setState({\n        fields,\n      });\n      this.formDidChange({ [name]: theValue });\n    };\n\n    /**\n     * Customize to change the values\n     * @param values\n     */\n    changeValues = async (values) => {\n      const { fields } = this.state;\n      // Initializes\n      this.init(values);\n      await Promise.all(\n        Object.keys(values).map(name => this.handleAssembleFieldChange(name, values[name])),\n      );\n      // Update\n      this.setState({\n        fields,\n      });\n      this.formDidChange(values);\n      return this;\n    };\n\n    /**\n     * Add one or more validation rules\n     * @param schema\n     */\n    addSchemas = (schema) => {\n      Object.assign(this.schemas, schema);\n      return this;\n    };\n\n    /**\n     * Delete one or more validation rules\n     * If there is no name, it will all be removed.\n     * @param names\n     */\n    removeSchemas = (...names) => {\n      if (names.length) {\n        names.forEach((name) => {\n          delete this.schemas[name];\n        });\n      } else {\n        this.schemas = {};\n      }\n      // Validate the deleted status\n      this.validateByNames(...names);\n      return this;\n    };\n\n    /**\n     * Add one or more fields\n     * @param values\n     */\n    addValues = (values) => {\n      const { fields } = this.state;\n      // Initializes\n      this.init(values);\n      // Update\n      this.setState({\n        fields,\n      });\n      this.formDidChange(values);\n      return this;\n    };\n\n    /**\n     * Deletes one or more fields\n     * If there is no name, it will all be removed.\n     * @param names\n     */\n    removeValues = (...names) => {\n      const { fields } = this.state;\n      if (names.length) {\n        names.forEach((name) => {\n          delete fields[name];\n          if (this.props.values) {\n            delete this.props.values[name];\n          }\n        });\n      } else {\n        // Remove all\n        Object.keys(fields).forEach((name) => {\n          delete this.state.fields[name];\n          if (this.props.values) {\n            delete this.props.values[name];\n          }\n        });\n      }\n      // Update\n      this.setState({\n        fields,\n      });\n      this.formDidChange({});\n      return this;\n    };\n\n    /**\n     * Reset one or more fields\n     * If there is no name, it will all be init.\n     * @param names\n     */\n    resetValues = (...names) => {\n      const { fields } = this.state;\n      const values = {};\n      if (names.length) {\n        names.forEach((name) => {\n          values[name] = this.originalValues[name];\n        });\n        this.init(values);\n      } else {\n        // Init all\n        Object.assign(values, this.originalValues);\n        this.init(values);\n      }\n      // Update\n      this.setState({\n        fields,\n      });\n      this.formDidChange(values);\n      return this;\n    };\n\n    /**\n     * Validate the component through names\n     * @param names\n     * @return {Boolean}\n     */\n    validateByNames = async (...names) => {\n      const result = await this.validateFieldsByNames(...names);\n      const { fields } = this.state;\n      // Update\n      this.setState({\n        fields,\n      });\n      return result;\n    };\n\n    /**\n     * Validate all\n     * @return {Boolean}\n     */\n    validate = () => this.validateByNames(...Object.keys(this.schemas));\n\n    // After change\n    formDidChange = () => {};\n\n    render() {\n      return (\n        <FormComponent\n          {...this.props}\n          formControl={this}\n        />\n      );\n    }\n  }\n);\n"]}