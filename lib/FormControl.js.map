{"version":3,"sources":["../src/FormControl.jsx"],"names":["schemas","methods","props","classNames","values","fields","Object","keys","forEach","name","className","static","value","state","validator","initField","init","onFormChange","nextProps","newValue","assembleFieldValidate","setState","every","result","propTypes","object","childContextTypes","isRequired","func","defaultProps","classes","schema","validateByField","error","classNameArray","success","filter","item","join","message","undefined","validateField","validateFieldsByNames","names","isValid","e","target","type","theValue","slice","index","indexOf","push","splice","changeValues","addSchemas","removeSchemas","addValues","removeValues","validateByNames","validate"],"mappings":"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","file":"FormControl.js","sourcesContent":["/**\n * A lightweight and extensible React validation component\n */\n\nimport React, { Component, PropTypes } from 'react';\nimport Validator from 'validate-framework-utils';\n\n/**\n * React validation component\n * @param schemas\n * @param methods Extended Validation Method\n * @return Component\n */\nexport default (schemas, methods) => FormComponent => (\n\n  /**\n   * Returns a react form\n   */\n  class FormControl extends Component {\n\n    static propTypes = {\n      values: PropTypes.object,\n      classNames: PropTypes.object,\n    };\n\n    static childContextTypes = {\n      fields: PropTypes.object.isRequired,\n      initField: PropTypes.func.isRequired,\n      onFormChange: PropTypes.func.isRequired,\n    };\n\n    static defaultProps = {\n      classNames: {},\n    };\n\n    schemas = Object.assign({}, schemas);\n\n    constructor(props) {\n      super(props);\n      const {\n        classNames,\n        values,\n      } = props;\n\n      const fields = {};\n      // Assemble the initialization data into fields\n      if (values) {\n        Object.keys(values).forEach((name) => {\n          fields[name] = {\n            className: classNames.static,\n            value: values[name],\n          };\n        });\n      }\n\n      this.state = {\n        fields,\n      };\n\n      // Initializes the validation component and customizes the validation method\n      this.validator = new Validator();\n      Object.assign(this.validator, methods, {\n        fields,\n      });\n    }\n\n    getChildContext() {\n      return {\n        fields: this.state.fields,\n        initField: this.init,\n        onFormChange: this.onFormChange,\n      };\n    }\n\n    componentWillReceiveProps(nextProps) {\n      const { values } = nextProps;\n      // No value\n      if (!values) {\n        return;\n      }\n      // Updates the state from the parent component\n      const { classNames } = this.props;\n      const { fields } = this.state;\n\n      Object.keys(values).forEach((name) => {\n        const newValue = values[name];\n        // Validate the new data\n        if (fields[name]) {\n          // diff\n          if (fields[name].value !== newValue) {\n            this.assembleFieldValidate(name, newValue);\n          }\n        } else {\n          // Add a new field\n          fields[name] = {\n            className: classNames.static,\n            value: newValue,\n          };\n        }\n      });\n\n      this.setState({\n        fields,\n      });\n    }\n\n    /**\n     * Get the fields object\n     * @returns {Object}\n     */\n    get fields() {\n      return this.state.fields;\n    }\n\n    /**\n     * Gets a list of form values\n     * @return {Object}\n     */\n    get formValues() {\n      const { fields } = this.state;\n      const values = {};\n      Object.keys(fields).forEach((name) => {\n        values[name] = fields[name].value;\n      });\n      return values;\n    }\n\n    /**\n     * Gets the global validation status\n     * @return {Boolean}\n     */\n    get isAllValid() {\n      const { fields } = this.state;\n      return Object.keys(this.schemas)\n        .every(name => fields[name] && fields[name].result);\n    }\n\n    /**\n     * Initializes the form value and classes\n     * @param values\n     * @param classes\n     */\n    init = (values, classes) => {\n      const { classNames } = this.props;\n      const { fields } = this.state;\n      // Merge\n      Object.assign(classNames, classes);\n      // Initialize\n      Object.keys(values).forEach((name) => {\n        const value = values[name];\n        fields[name] = {\n          className: classNames.static,\n          value,\n        };\n        // Synchronize values external state\n        if (this.props.values) {\n          this.props.values[name] = value;\n        }\n      });\n      return this;\n    };\n\n    /**\n     * Assemble the data\n     * This method is not operational\n     * @param name\n     * @param value\n     */\n    assembleFieldValidate = (name, value) => {\n      const { classNames } = this.props;\n      const { fields } = this.state;\n      // No schema is not to validate\n      const schema = this.schemas[name] && Object.assign(this.schemas[name], { value });\n      const { result, error } = schema ? this.validator.validateByField(schema) : {};\n      // Assembly class name\n      // Validation success and validation failure Add the appropriate class\n      const classNameArray = [\n        classNames.static,\n        result ? classNames.success : null,\n        result === false ? classNames.error : null,\n      ];\n      // Assemble\n      Object.assign(fields[name], {\n        value,\n        className: classNameArray.filter(item => item).join('\\u{20}'),\n        result,\n        message: error ? error.message : undefined,\n      });\n    };\n\n    /**\n     * Validate a single field\n     * @param name\n     * @param value\n     * @return {Boolean}\n     */\n    validateField = (name, value) => {\n      const { fields } = this.state;\n      // Assemble\n      this.assembleFieldValidate(name, value);\n      return fields[name].result;\n    };\n\n    /**\n     * Validate fields by names\n     * @param names\n     * @return {Boolean}\n     */\n    validateFieldsByNames = (...names) => {\n      const { fields } = this.state;\n      let isValid = true;\n      names.forEach((name) => {\n        const result = fields[name] && this.validateField(name, fields[name].value);\n        // Exclude unauthenticated and validated successfully\n        if (result === false) {\n          isValid = false;\n        }\n      });\n      return isValid;\n    };\n\n    // Form change event listener\n    onFormChange = (e) => {\n      const { name, type, value } = e.target;\n      const { fields } = this.state;\n\n      // Dependent on the name attribute\n      if (!name) {\n        return;\n      }\n\n      let theValue;\n      // Checkbox processing\n      if (type === 'checkbox') {\n        theValue = fields[name].value.slice();\n        const index = theValue.indexOf(value);\n        if (index === -1) {\n          theValue.push(value);\n        } else {\n          theValue.splice(index, 1);\n        }\n      } else {\n        theValue = value;\n      }\n      // Synchronize values external state\n      if (this.props.values) {\n        this.props.values[name] = theValue;\n      }\n      // Validate\n      this.validateField(name, theValue);\n      // Update\n      this.setState({\n        fields,\n      });\n    };\n\n    /**\n     * Customize to change the values\n     * @param values\n     */\n    changeValues = (values) => {\n      const { fields } = this.state;\n      // Initializes\n      this.init(values);\n      Object.keys(values).forEach((name) => {\n        this.validateField(name, values[name]);\n      });\n      // Update\n      this.setState({\n        fields,\n      });\n      return this;\n    };\n\n    /**\n     * Add one or more validation rules\n     * @param schema\n     */\n    addSchemas = (schema) => {\n      Object.assign(this.schemas, schema);\n      return this;\n    };\n\n    /**\n     * Delete one or more validation rules\n     * @param names\n     */\n    removeSchemas = (...names) => {\n      const { fields } = this.state;\n      names.forEach((name) => {\n        delete this.schemas[name];\n      });\n      // Validate the deleted status\n      this.validateFieldsByNames(...names);\n      // Update\n      this.setState({\n        fields,\n      });\n      return this;\n    };\n\n    /**\n     * Add one or more fields\n     * @param values\n     */\n    addValues = (values) => {\n      const { fields } = this.state;\n      // Initializes\n      this.init(values);\n      // Update\n      this.setState({\n        fields,\n      });\n      return this;\n    };\n\n    /**\n     * Deletes one or more fields\n     * @param names\n     */\n    removeValues = (...names) => {\n      const { fields } = this.state;\n      names.forEach((name) => {\n        delete fields[name];\n      });\n      // Update\n      this.setState({\n        fields,\n      });\n      return this;\n    };\n\n    /**\n     * Validate the component through names\n     * @param names\n     * @return {Boolean}\n     */\n    validateByNames = (...names) => {\n      const result = this.validateFieldsByNames(...names);\n      const { fields } = this.state;\n      // Update\n      this.setState({\n        fields,\n      });\n      return result;\n    };\n\n    // Validate all\n    validate = () => {\n      const names = Object.keys(this.schemas);\n      return this.validateByNames(...names);\n    };\n\n    render() {\n      return (\n        <FormComponent\n          {...this.props}\n          formControl={this}\n        />\n      );\n    }\n  }\n);\n"]}