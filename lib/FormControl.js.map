{"version":3,"sources":["../src/FormControl.jsx"],"names":["schemas","methods","props","classNames","values","delay","delayValidateField","bind","fields","Object","keys","forEach","name","className","static","value","state","validator","assign","formControl","nextProps","newValue","assembleFieldChange","assembleFieldValidate","setState","every","result","Component","propTypes","object","number","childContextTypes","isRequired","defaultProps","originalValues","init","classes","initClassNames","undefined","schema","validateByField","error","classNameArray","success","filter","item","join","message","validateField","validateFieldsByNames","names","isValid","onFormChange","e","target","type","theValue","slice","index","indexOf","push","splice","formDidChange","changeValues","addSchemas","removeSchemas","length","validateByNames","addValues","removeValues","resetValues","validate"],"mappings":"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","file":"FormControl.js","sourcesContent":["/**\n * A lightweight and extensible React validation component\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Validator from 'validate-framework-utils';\nimport debounce from 'lodash/debounce';\nimport noop from 'lodash/noop';\n\n/**\n * React validation component\n * @param schemas\n * @param methods Extended Validation Method\n * @return Component\n */\nexport default (schemas, methods) => FormComponent => (\n\n  /**\n   * Returns a react form\n   */\n  class FormControl extends React.Component {\n\n    static propTypes = {\n      values: PropTypes.object,\n      classNames: PropTypes.object,\n      delay: PropTypes.number,\n    };\n\n    static childContextTypes = {\n      formControl: PropTypes.object.isRequired,\n    };\n\n    static defaultProps = {\n      classNames: {},\n      delay: 0,\n    };\n\n    schemas = Object.assign({}, schemas);\n\n    // Original\n    originalValues = {};\n\n    constructor(props) {\n      super(props);\n      const {\n        classNames,\n        values,\n        delay,\n      } = props;\n\n      if (delay) {\n        this.delayValidateField = debounce(this.delayValidateField.bind(this), delay);\n      }\n\n      const fields = {};\n      // Assemble the initialization data into fields\n      if (values) {\n        Object.keys(values).forEach((name) => {\n          fields[name] = {\n            className: classNames.static,\n            value: values[name],\n          };\n        });\n      }\n\n      this.state = {\n        fields,\n      };\n\n      // Initializes the validation component and customizes the validation method\n      this.validator = new Validator();\n      Object.assign(this.validator, methods, {\n        fields,\n      });\n    }\n\n    getChildContext() {\n      return {\n        formControl: this,\n      };\n    }\n\n    componentWillReceiveProps(nextProps) {\n      const { values } = nextProps;\n      // No value\n      if (!values) {\n        return;\n      }\n      // Updates the state from the parent component\n      const { classNames } = this.props;\n      const { fields } = this.state;\n\n      (async () => {\n        // eslint-disable-next-line no-restricted-syntax\n        for (const name of Object.keys(values)) {\n          const newValue = values[name];\n          // Validate the new data\n          if (fields[name]) {\n            // diff\n            if (fields[name].value !== newValue) {\n              this.assembleFieldChange(name, newValue);\n              await this.assembleFieldValidate(name, newValue);\n            }\n          } else {\n            // Add a new field\n            fields[name] = {\n              className: classNames.static,\n              value: newValue,\n            };\n          }\n        }\n        // Update\n        this.setState({\n          fields,\n        });\n      })();\n    }\n\n    /**\n     * Get the fields object\n     * @returns {Object}\n     */\n    get fields() {\n      return this.state.fields;\n    }\n\n    /**\n     * Gets a list of form values\n     * @return {Object}\n     */\n    get formValues() {\n      const { fields } = this.state;\n      const values = {};\n      Object.keys(fields).forEach((name) => {\n        values[name] = fields[name].value;\n      });\n      return values;\n    }\n\n    /**\n     * Gets the global validation status\n     * @return {Boolean}\n     */\n    get isAllValid() {\n      const { fields } = this.state;\n      return Object\n        .keys(this.schemas)\n        .every(name => fields[name] && fields[name].result);\n    }\n\n    /**\n     * Initializes the form value and classes\n     * @param values\n     * @param classes\n     */\n    init = (values, classes) => {\n      const { fields } = this.state;\n      // Assign classNames\n      this.initClassNames(classes);\n      // Initialize\n      Object.keys(values).forEach((name) => {\n        const value = values[name];\n        fields[name] = {\n          className: this.props.classNames.static,\n          value,\n        };\n        // Only initialized once\n        if (this.originalValues[name] === undefined) {\n          this.originalValues[name] = value;\n        }\n        // Synchronize values external state\n        if (this.props.values) {\n          this.props.values[name] = value;\n        }\n      });\n      return this;\n    };\n\n    /**\n     * Init classNames\n     * @param classes\n     */\n    initClassNames = (classes) => {\n      // Merge\n      Object.assign(this.props.classNames, classes);\n      return this;\n    };\n\n    /**\n     * Assemble the data\n     * This method is not operational\n     * @param name\n     * @param value\n     * @return {FormControl}\n     */\n    assembleFieldChange = (name, value) => {\n      Object.assign(this.state.fields[name], {\n        value,\n      });\n      return this;\n    };\n\n    /**\n     * Validate the data\n     * This method is not operational\n     * @param name\n     * @param value\n     * @return {FormControl}\n     */\n    assembleFieldValidate = async (name, value) => {\n      const { classNames } = this.props;\n      const { fields } = this.state;\n      // No schema is not to validate\n      const schema = this.schemas[name] && Object.assign(this.schemas[name], { value });\n      const { result, error } = schema\n        ? await this.validator.validateByField(schema)\n        : {};\n      // Assembly class name\n      // Validation success and validation failure Add the appropriate class\n      const classNameArray = [\n        classNames.static,\n        result ? classNames.success : null,\n        result === false ? classNames.error : null,\n      ];\n      // Assemble\n      Object.assign(fields[name], {\n        className: classNameArray.filter(item => item).join('\\u{20}'),\n        result,\n        message: error ? error.message : undefined,\n      });\n      return this;\n    };\n\n    /**\n     * Validate a single field\n     * @param name\n     * @param value\n     * @return {Boolean}\n     */\n    validateField = async (name, value) => {\n      const { fields } = this.state;\n      // Assemble\n      await this.assembleFieldValidate(name, value);\n      return fields[name].result;\n    };\n\n    /**\n     * DelayValidateField\n     * @param name\n     * @param value\n     */\n    async delayValidateField(name, value) {\n      const { fields } = this.state;\n      // Assemble\n      await this.assembleFieldValidate(name, value);\n      this.setState({\n        fields,\n      });\n      return this;\n    }\n\n    /**\n     * Validate fields by names\n     * @param names\n     * @return {Boolean}\n     */\n    validateFieldsByNames = async (...names) => {\n      const { fields } = this.state;\n      let isValid = true;\n      // eslint-disable-next-line no-restricted-syntax\n      for (const name of names) {\n        const result = fields[name] && await this.validateField(name, fields[name].value);\n        // Exclude unauthenticated and validated successfully\n        if (result === false) {\n          isValid = false;\n        }\n      }\n      return isValid;\n    };\n\n    // Form change event listener\n    onFormChange = (e) => {\n      const { name, type, value } = e.target;\n      const { fields } = this.state;\n\n      // Dependent on the name attribute\n      if (!name) {\n        return;\n      }\n\n      let theValue;\n      // Checkbox processing\n      if (type === 'checkbox') {\n        theValue = fields[name].value.slice();\n        const index = theValue.indexOf(value);\n        if (index === -1) {\n          theValue.push(value);\n        } else {\n          theValue.splice(index, 1);\n        }\n      } else {\n        theValue = value;\n      }\n      // Synchronize values external state\n      if (this.props.values) {\n        this.props.values[name] = theValue;\n      }\n      // Assemble and delay validate\n      this.assembleFieldChange(name, theValue).delayValidateField(name, theValue);\n      // Update\n      this.setState({\n        fields,\n      });\n      this.formDidChange({ [name]: theValue });\n    };\n\n    /**\n     * Customize to change the values\n     * @param values\n     */\n    changeValues = (values) => {\n      const { fields } = this.state;\n      // Initializes\n      this.init(values);\n      Object.keys(values).forEach(name => this.assembleFieldChange(name, values[name])\n        .delayValidateField(name, values[name]));\n      // Update\n      this.setState({\n        fields,\n      });\n      this.formDidChange(values);\n      return this;\n    };\n\n    /**\n     * Add one or more validation rules\n     * @param schema\n     */\n    addSchemas = (schema) => {\n      Object.assign(this.schemas, schema);\n      return this;\n    };\n\n    /**\n     * Delete one or more validation rules\n     * If there is no name, it will all be removed.\n     * @param names\n     */\n    removeSchemas = (...names) => {\n      if (names.length) {\n        names.forEach((name) => {\n          delete this.schemas[name];\n        });\n      } else {\n        this.schemas = {};\n      }\n      // Validate the deleted status\n      this.validateByNames(...names);\n      return this;\n    };\n\n    /**\n     * Add one or more fields\n     * @param values\n     */\n    addValues = (values) => {\n      const { fields } = this.state;\n      // Initializes\n      this.init(values);\n      // Update\n      this.setState({\n        fields,\n      });\n      this.formDidChange(values);\n      return this;\n    };\n\n    /**\n     * Deletes one or more fields\n     * If there is no name, it will all be removed.\n     * @param names\n     */\n    removeValues = (...names) => {\n      const { fields } = this.state;\n      if (names.length) {\n        names.forEach((name) => {\n          delete fields[name];\n          if (this.props.values) {\n            delete this.props.values[name];\n          }\n        });\n      } else {\n        // Remove all\n        this.state.fields = {};\n        if (this.props.values) {\n          this.props.values = {};\n        }\n      }\n      // Update\n      this.setState({\n        fields,\n      });\n      this.formDidChange({});\n      return this;\n    };\n\n    /**\n     * Reset one or more fields\n     * If there is no name, it will all be init.\n     * @param names\n     */\n    resetValues = (...names) => {\n      const { fields } = this.state;\n      const values = {};\n      if (names.length) {\n        names.forEach((name) => {\n          values[name] = this.originalValues[name];\n        });\n        this.init(values);\n      } else {\n        // Init all\n        Object.assign(values, this.originalValues);\n        this.init(values);\n      }\n      // Update\n      this.setState({\n        fields,\n      });\n      this.formDidChange(values);\n      return this;\n    };\n\n    /**\n     * Validate the component through names\n     * @param names\n     * @return {Boolean}\n     */\n    validateByNames = async (...names) => {\n      const result = await this.validateFieldsByNames(...names);\n      const { fields } = this.state;\n      // Update\n      this.setState({\n        fields,\n      });\n      return result;\n    };\n\n    /**\n     * Validate all\n     * @return {Boolean}\n     */\n    validate = () => {\n      const names = Object.keys(this.schemas);\n      return this.validateByNames(...names);\n    };\n\n    // After change\n    formDidChange = noop;\n\n    render() {\n      return (\n        <FormComponent\n          {...this.props}\n          formControl={this}\n        />\n      );\n    }\n  }\n);\n"]}